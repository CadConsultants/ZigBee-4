###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                26/Nov/2013  16:40:29 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Components\h #
#                          al\target\CC2530EB\hal_key.c                       #
#    Command line       =  -f E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C #
#                          51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEX #
#                          AS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\Samples\BeginApp\CC2530DB\..\..\..\Tools\CC #
#                          2530DB\f8wEndev.cfg (-DCPU32MHZ                    #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wConfig.cfg (-DSECURE=0                      #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x04000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Components\h #
#                          al\target\CC2530EB\hal_key.c -D ZIGBEEPRO -D       #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -D xPOWER_SAVING -D HAL_LCD=FALSE -D               #
#                          HAL_KEY=FALSE -D HAL_ADC=FALSE -D HAL_UART=FALSE   #
#                          -D HAL_SPI=FALSE -lC E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍ #
#                          øÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_P #
#                          ROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2 #
#                          .0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530DB #
#                          \EndDeviceEB-Pro\List\ -lA                         #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\List #
#                          \ --diag_suppress Pe001,Pa010 -o                   #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\Obj\ #
#                           -e --require_prototypes --debug --core=plain      #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I E:\C51RF-CC2530-PKÎÞÏßZIGBE #
#                          EÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007 #
#                          _PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530 #
#                          DB\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1. #
#                          10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò #
#                          \TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Proje #
#                          cts\zstack\Samples\BeginApp\CC2530DB\..\SOURCE\    #
#                          -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C #
#                          51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEX #
#                          AS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\Samples\BeginApp\CC2530DB\..\..\..\ZMAIN\TI #
#                          2530DB\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì #
#                          ¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ #
#                          ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\P #
#                          rojects\zstack\Samples\BeginApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MT\ -I E:\C51RF-CC2530-PKÎÞÏßZIGB #
#                          EEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE200 #
#                          7_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530- #
#                          2.2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I      #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\HAL\TARGET\CC2530EB\ -I                      #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\OSAL\MCU\CCSOC\ -I                           #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\OSAL\INCLUDE\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBE #
#                          EÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007 #
#                          _PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I          #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\NWK\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍø #
#                          Âç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PR #
#                          OÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2. #
#                          0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\STACK\SEC\ -I            #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\SAPI\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍ #
#                          øÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_P #
#                          ROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2 #
#                          .0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\SYS\ -I           #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\ZDO\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍø #
#                          Âç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PR #
#                          OÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2. #
#                          0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I             #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\ZMAC\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª· #
#                          ¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾ #
#                          ²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3 #
#                          .0\Projects\zstack\Samples\BeginApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\SERVICES\SDATA\ -I                           #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\MAC\INCLUDE\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEE #
#                          ÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_ #
#                          PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2. #
#                          2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I     #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\MAC\LOW_LEVEL\srf04\ -I                      #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I          #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\List #
#                          \hal_key.lst                                       #
#    Object file        =  E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\Obj\ #
#                          hal_key.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Components\hal\target\CC2530EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2008-12-15 07:19:03 -0800 (Mon, 15 Dec 2008) $
      4            Revision:       $Revision: 18611 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_drivers.h"
     87          #include "hal_adc.h"
     88          #include "hal_key.h"
     89          #include "osal.h"
     90          
     91          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     92          
     93          /**************************************************************************************************
     94           *                                              MACROS
     95           **************************************************************************************************/
     96          
     97          /**************************************************************************************************
     98           *                                            CONSTANTS
     99           **************************************************************************************************/
    100          #define HAL_KEY_RISING_EDGE   0
    101          #define HAL_KEY_FALLING_EDGE  1
    102          
    103          #define HAL_KEY_DEBOUNCE_VALUE  25
    104          #define HAL_KEY_POLLING_VALUE   100
    105          
    106          /* CPU port interrupt */
    107          #define HAL_KEY_CPU_PORT_0_IF P0IF
    108          #define HAL_KEY_CPU_PORT_2_IF P2IF
    109          
    110          /* SW_6 is at P0.5 */
    111          #define HAL_KEY_SW_6_PORT   P0
    112          #define HAL_KEY_SW_6_BIT    BV(5)
    113          #define HAL_KEY_SW_6_SEL    P0SEL
    114          #define HAL_KEY_SW_6_DIR    P0DIR
    115          
    116          /* edge interrupt */
    117          #define HAL_KEY_SW_6_EDGEBIT  BV(0) //P0ICON
    118          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    119          
    120          
    121          /* SW_6 interrupts */
    122          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    123          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    124          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    125          #define HAL_KEY_SW_6_ICTLBIT  BV(5) /* P0IEN - P0.1 enable/disable bit */
    126          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    127          
    128          #define HAL_KEY_SW_7_EN     TRUE
    129          
    130          /* SW_7 is at P0.4 */
    131          #define HAL_KEY_SW_7_PORT   P0
    132          #define HAL_KEY_SW_7_BIT    BV(4)
    133          #define HAL_KEY_SW_7_SEL    P0SEL
    134          #define HAL_KEY_SW_7_DIR    P0DIR
    135          
    136          /* edge interrupt */
    137          #define HAL_KEY_SW_7_EDGEBIT  BV(0) //P0ICON
    138          #define HAL_KEY_SW_7_EDGE     HAL_KEY_FALLING_EDGE
    139          
    140          
    141          /* SW_7 interrupts */
    142          #define HAL_KEY_SW_7_IEN      IEN1  /* CPU interrupt mask register */
    143          #define HAL_KEY_SW_7_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    144          #define HAL_KEY_SW_7_ICTL     P0IEN /* Port Interrupt Control register */
    145          #define HAL_KEY_SW_7_ICTLBIT  BV(4) /* P0IEN - P0.1 enable/disable bit */
    146          #define HAL_KEY_SW_7_PXIFG    P0IFG /* Interrupt flag at source */
    147          
    148          
    149          
    150          /* Joy stick move at P2.0 */
    151          #define HAL_KEY_JOY_MOVE_PORT   P2
    152          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    153          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    154          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    155          
    156          /* edge interrupt */
    157          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    158          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
    159          
    160          /* Joy move interrupts */
    161          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    162          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    163          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    164          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    165          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    166          
    167          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    168          
    169          
    170          /**************************************************************************************************
    171           *                                            TYPEDEFS
    172           **************************************************************************************************/
    173          
    174          
    175          /**************************************************************************************************
    176           *                                        GLOBAL VARIABLES
    177           **************************************************************************************************/
    178          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
    179          static halKeyCBack_t pHalKeyProcessFunction;
    180          static uint8 HalKeyConfigured;
    181          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
    182          
    183          /**************************************************************************************************
    184           *                                        FUNCTIONS - Local
    185           **************************************************************************************************/
    186          void halProcessKeyInterrupt(void);
    187          uint8 halGetJoyKeyInput(void);
    188          
    189          
    190          
    191          /**************************************************************************************************
    192           *                                        FUNCTIONS - API
    193           **************************************************************************************************/
    194          
    195          
    196          /**************************************************************************************************
    197           * @fn      HalKeyInit
    198           *
    199           * @brief   Initilize Key Service
    200           *
    201           * @param   none
    202           *
    203           * @return  None
    204           **************************************************************************************************/
    205          void HalKeyInit( void )
    206          {
    207            /* Initialize previous key to 0 */
    208            halKeySavedKeys = 0;
    209          
    210            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
    211            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
    212            
    213            HAL_KEY_SW_7_SEL &= ~(HAL_KEY_SW_7_BIT);    /* Set pin function to GPIO */
    214            HAL_KEY_SW_7_DIR &= ~(HAL_KEY_SW_7_BIT);    /* Set pin direction to Input */
    215          
    216           // HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
    217          //  HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
    218          
    219          
    220            /* Initialize callback function */
    221            pHalKeyProcessFunction  = NULL;
    222          
    223            /* Start with key is not configured */
    224            HalKeyConfigured = FALSE;
    225          }
    226          
    227          
    228          /**************************************************************************************************
    229           * @fn      HalKeyConfig
    230           *
    231           * @brief   Configure the Key serivce
    232           *
    233           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    234           *          cback - pointer to the CallBack function
    235           *
    236           * @return  None
    237           **************************************************************************************************/
    238          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
    239          {
    240            /* Enable/Disable Interrupt or */
    241            Hal_KeyIntEnable = interruptEnable;
    242          
    243            /* Register the callback fucntion */
    244            pHalKeyProcessFunction = cback;
    245          
    246            /* Determine if interrupt is enable or not */
    247            if (Hal_KeyIntEnable)
    248            {
    249              /* Rising/Falling edge configuratinn */
    250          
    251              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
    252              /* For falling edge, the bit must be set. */
    253            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    254              PICTL |= HAL_KEY_SW_6_EDGEBIT;
    255            #endif
    256              PICTL &= ~(HAL_KEY_SW_7_EDGEBIT);    /* Clear the edge bit */
    257              /* For falling edge, the bit must be set. */
    258            #if (HAL_KEY_SW_7_EDGE == HAL_KEY_FALLING_EDGE)
    259              PICTL |= HAL_KEY_SW_7_EDGEBIT;
    260            #endif
    261          
    262          
    263          
    264              /* Interrupt configuration:
    265               * - Enable interrupt generation at the port
    266               * - Enable CPU interrupt
    267               * - Clear any pending interrupt
    268               */
    269              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
    270              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
    271              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
    272          
    273              HAL_KEY_SW_7_ICTL |= HAL_KEY_SW_7_ICTLBIT;
    274              HAL_KEY_SW_7_IEN |= HAL_KEY_SW_7_IENBIT;
    275              HAL_KEY_SW_7_PXIFG = ~(HAL_KEY_SW_7_BIT);
    276          
    277          
    278              /* Rising/Falling edge configuratinn */
    279          
    280            //  HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
    281              /* For falling edge, the bit must be set. */
    282            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    283            //  HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
    284            #endif
    285          
    286          
    287              /* Interrupt configuration:
    288               * - Enable interrupt generation at the port
    289               * - Enable CPU interrupt
    290               * - Clear any pending interrupt
    291               */
    292             // HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
    293            //  HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
    294            //  HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
    295          
    296          
    297              /* Do this only after the hal_key is configured - to work with sleep stuff */
    298              if (HalKeyConfigured == TRUE)
    299              {
    300                osal_stop_timerEx( Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
    301              }
    302            }
    303            else    /* Interrupts NOT enabled */
    304            {
    305              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt   */
    306              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
    307              HAL_KEY_SW_7_ICTL &= ~(HAL_KEY_SW_7_ICTLBIT); /* don't generate interrupt   */
    308              HAL_KEY_SW_7_IEN &= ~(HAL_KEY_SW_7_IENBIT);   /* Clear interrupt enable bit */
    309          
    310              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_POLLING_VALUE);    /* Kick off polling */
    311            }
    312          
    313            /* Key now is configured */
    314            HalKeyConfigured = TRUE;
    315          }
    316          
    317          
    318          /**************************************************************************************************
    319           * @fn      HalKeyRead
    320           *
    321           * @brief   Read the current value of a key
    322           *
    323           * @param   None
    324           *
    325           * @return  keys - current keys status
    326           **************************************************************************************************/
    327          uint8 HalKeyRead ( void )
    328          {
    329            uint8 keys = 0;
    330          
    331          #ifdef HAL_BOARD_CC2530EB_REV17
    332            if ( (HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active high */
    333          #elif defined (HAL_BOARD_CC2530EB_REV13)
    334            if (!(HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active low */
    335          #endif
    336            {
    337              keys |= HAL_KEY_SW_6;
    338            }
    339          #ifdef HAL_BOARD_CC2530EB_REV17
    340            if ( (HAL_KEY_SW_7_PORT & HAL_KEY_SW_7_BIT))    /* Key is active high */
    341          #elif defined (HAL_BOARD_CC2530EB_REV13)
    342            if (!(HAL_KEY_SW_7_PORT & HAL_KEY_SW_7_BIT))    /* Key is active low */
    343          #endif
    344            {
    345              keys |= HAL_KEY_SW_7;
    346            }
    347          
    348          
    349           // if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
    350            {
    351              keys |= halGetJoyKeyInput();
    352            }
    353          
    354            return keys;
    355          }
    356          
    357          
    358          /**************************************************************************************************
    359           * @fn      HalKeyPoll
    360           *
    361           * @brief   Called by hal_driver to poll the keys
    362           *
    363           * @param   None
    364           *
    365           * @return  None
    366           **************************************************************************************************/
    367          void HalKeyPoll (void)
    368          {
    369            uint8 keys = 0;
    370          
    371            if (!(HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active low */
    372            {
    373              keys |= HAL_KEY_SW_6;
    374            }
    375            if (!(HAL_KEY_SW_7_PORT & HAL_KEY_SW_7_BIT))    /* Key is active low */
    376            {
    377              keys |= HAL_KEY_SW_7;
    378            }
    379          
    380           // if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
    381            {
    382              keys |= halGetJoyKeyInput();
    383            }
    384          
    385            /* If interrupts are not enabled, previous key status and current key status
    386             * are compared to find out if a key has changed status.
    387             */
    388            if (!Hal_KeyIntEnable)
    389            {
    390              if (keys == halKeySavedKeys)
    391              {
    392                /* Exit - since no keys have changed */
    393                return;
    394              }
    395              /* Store the current keys for comparation next time */
    396              halKeySavedKeys = keys;
    397            }
    398            else
    399            {
    400              /* Key interrupt handled here */
    401            }
    402          
    403            /* Invoke Callback if new keys were depressed */
    404            if (keys && (pHalKeyProcessFunction))
    405            {
    406              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
    407            }
    408          }
    409          
    410          /**************************************************************************************************
    411           * @fn      halGetJoyKeyInput
    412           *
    413           * @brief   Map the ADC value to its corresponding key.
    414           *
    415           * @param   None
    416           *
    417           * @return  keys - current joy key status
    418           **************************************************************************************************/
    419          uint8 halGetJoyKeyInput(void)
    420          {
    421            /* The joystick control is encoded as an analog voltage.
    422             * Read the JOY_LEVEL analog value and map it to joy movement.
    423             */
    424            uint8 adc;
    425            uint8 ksave0 = 0;
    426            uint8 ksave1;
    427          
    428            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    429            do
    430            {
    431              ksave1 = ksave0;    /* save previouse key reading */
    432          
    433              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
    434          
    435              if ((adc >= 28) && (adc <= 38))
    436              {
    437                 ksave0 |= HAL_KEY_LEFT;//HAL_KEY_UP;
    438              }
    439              else if ((adc < 28))
    440              {
    441                ksave0 |= HAL_KEY_RIGHT;
    442              }
    443              else if ((adc >= 60) && (adc <= 73))
    444              {
    445                ksave0 |= HAL_KEY_DOWN;//HAL_KEY_LEFT;
    446              }
    447              else if ((adc >= 89) && (adc <= 100))
    448              {
    449                ksave0 |= HAL_KEY_UP;//HAL_KEY_CENTER;
    450              }
    451            } while (ksave0 != ksave1);
    452          
    453            return ksave0;
    454          }
    455          
    456          
    457          
    458          
    459          
    460          /**************************************************************************************************
    461           * @fn      halProcessKeyInterrupt
    462           *
    463           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    464           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    465           *
    466           * @param
    467           *
    468           * @return
    469           **************************************************************************************************/
    470          void halProcessKeyInterrupt (void)
    471          {
    472            bool valid=FALSE;
    473          
    474            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
    475            {
    476              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
    477              valid = TRUE;
    478            }
    479            if (HAL_KEY_SW_7_PXIFG & HAL_KEY_SW_7_BIT)  /* Interrupt Flag has been set */
    480            {
    481              HAL_KEY_SW_7_PXIFG = ~(HAL_KEY_SW_7_BIT); /* Clear Interrupt Flag */
    482              valid = TRUE;
    483            }
    484          
    485            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
    486            {
    487              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
    488              valid = TRUE;
    489            }
    490          
    491            if (valid)
    492            {
    493              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
    494            }
    495          }
    496          
    497          /**************************************************************************************************
    498           * @fn      HalKeyEnterSleep
    499           *
    500           * @brief  - Get called to enter sleep mode
    501           *
    502           * @param
    503           *
    504           * @return
    505           **************************************************************************************************/
    506          void HalKeyEnterSleep ( void )
    507          {
    508          }
    509          
    510          /**************************************************************************************************
    511           * @fn      HalKeyExitSleep
    512           *
    513           * @brief   - Get called when sleep is over
    514           *
    515           * @param
    516           *
    517           * @return  - return saved keys
    518           **************************************************************************************************/
    519          uint8 HalKeyExitSleep ( void )
    520          {
    521            /* Wake up and read keys */
    522            return ( HalKeyRead () );
    523          }
    524          
    525          /***************************************************************************************************
    526           *                                    INTERRUPT SERVICE ROUTINE
    527           ***************************************************************************************************/
    528          
    529          /**************************************************************************************************
    530           * @fn      halKeyPort0Isr
    531           *
    532           * @brief   Port0 ISR
    533           *
    534           * @param
    535           *
    536           * @return
    537           **************************************************************************************************/
    538          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
    539          {
    540            if ((HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)||(HAL_KEY_SW_7_PXIFG & HAL_KEY_SW_7_BIT))
    541            {
    542              halProcessKeyInterrupt();
    543            }
    544          
    545            /*
    546              Clear the CPU interrupt flag for Port_0
    547              PxIFG has to be cleared before PxIF
    548            */
    549            HAL_KEY_SW_6_PXIFG = 0;
    550            HAL_KEY_CPU_PORT_0_IF = 0;
    551          }
    552          
    553          
    554          /**************************************************************************************************
    555           * @fn      halKeyPort2Isr
    556           *
    557           * @brief   Port2 ISR
    558           *
    559           * @param
    560           *
    561           * @return
    562           **************************************************************************************************/
    563          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
    564          {
    565            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
    566            {
    567              halProcessKeyInterrupt();
    568            }
    569          
    570            /*
    571              Clear the CPU interrupt flag for Port_2
    572              PxIFG has to be cleared before PxIF
    573              Notes: P2_1 and P2_2 are debug lines.
    574            */
    575            HAL_KEY_JOY_MOVE_PXIFG = 0;
    576            HAL_KEY_CPU_PORT_2_IF = 0;
    577          }
    578          
    579          #else
    580          
    581          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          void HalKeyInit(void){}
   \                     HalKeyInit:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    583          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
   \                     HalKeyConfig:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    584          uint8 HalKeyRead(void){ return 0;}
   \                     HalKeyRead:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    585          void HalKeyPoll(void){}
   \                     HalKeyPoll:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyConfig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll
    586          
    587          #endif /* HAL_KEY */
    588          
    589          
    590          
    591          
    592          
    593          /**************************************************************************************************
    594          **************************************************************************************************/
    595          
    596          
    597          

   Maximum stack usage in bytes:

     Function     ISTACK PSTACK XSTACK
     --------     ------ ------ ------
     HalKeyConfig     0      0      0
     HalKeyInit       0      0      0
     HalKeyPoll       0      0      0
     HalKeyRead       0      0      0


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     HalKeyInit              3
     HalKeyConfig            3
     HalKeyRead              5
     HalKeyPoll              3
     ??HalKeyInit?relay      6
     ??HalKeyConfig?relay    6
     ??HalKeyRead?relay      6
     ??HalKeyPoll?relay      6

 
 14 bytes in segment BANKED_CODE
 24 bytes in segment BANK_RELAYS
 
 38 bytes of CODE memory

Errors: none
Warnings: none
