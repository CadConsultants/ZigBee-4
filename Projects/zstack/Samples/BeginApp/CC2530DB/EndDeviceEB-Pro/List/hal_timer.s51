///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               29/Nov/2013  12:48:13 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Component /
//                          s\hal\target\CC2530EB\hal_timer.c                 /
//    Command line       =  -f E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\ /
//                          C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\T /
//                          EXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\Samples\BeginApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wEndev.cfg (-DCPU32MHZ               /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wConfig.cfg (-DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x04000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\C51RF-CC2530-PKÎÞÏßZIGB /
//                          EEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE20 /
//                          07_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC253 /
//                          0-2.2.0-1.3.0\Components\hal\target\CC2530EB\hal_ /
//                          timer.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D          /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          xPOWER_SAVING -D HAL_LCD=FALSE -D HAL_KEY=FALSE   /
//                          -D HAL_ADC=FALSE -D HAL_UART=FALSE -D             /
//                          HAL_SPI=FALSE -lC E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂ /
//                          ç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PR /
//                          OÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2 /
//                          .0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530D /
//                          B\EndDeviceEB-Pro\List\ -lA                       /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\ /
//                          List\ --diag_suppress Pe001,Pa010 -o              /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\ /
//                          Obj\ -e --require_prototypes --debug              /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I E:\C51RF-CC2530-PKÎÞÏßZIGB /
//                          EEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE20 /
//                          07_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC253 /
//                          0-2.2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC /
//                          2530DB\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½ /
//                          Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²â /
//                          ÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3. /
//                          0\Projects\zstack\Samples\BeginApp\CC2530DB\..\SO /
//                          URCE\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨ /
//                          V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ /
//                          ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\ /
//                          Projects\zstack\Samples\BeginApp\CC2530DB\..\..\. /
//                          .\ZMAIN\TI2530DB\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEE /
//                          ÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007 /
//                          _PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530- /
//                          2.2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\MT\ -I             /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\HAL\INCLUDE\ -I                         /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\HAL\TARGET\CC2530EB\ -I                 /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\OSAL\MCU\CCSOC\ -I                      /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\OSAL\INCLUDE\ -I                        /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\AF\ -I E:\C51RF-CC2530-PKÎÞÏßZIGB /
//                          EEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE20 /
//                          07_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC253 /
//                          0-2.2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I    /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SEC\ -I                           /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SAPI\ -I                          /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SYS\ -I                           /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\ZDO\ -I                           /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\ZMAC\F8W\ -I E:\C51RF-CC2530-PKÎÞÏßZIGB /
//                          EEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE20 /
//                          07_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC253 /
//                          0-2.2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\SERVICES\SADDR\ -I                      /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\SERVICES\SDATA\ -I                      /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\INCLUDE\ -I                         /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\HIGH_LEVEL\ -I                      /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\ -I                 /
//                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I     /
//                          "C:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.3 Evaluation version\8051\INC\" -I "C:\Program  /
//                          Files\IAR Systems\Embedded Workbench 5.3          /
//                          Evaluation version\8051\INC\CLIB\" -Ohz           /
//    List file          =  E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51 /
//                          RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXA /
//                          S-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\ /
//                          List\hal_timer.s51                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_timer

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??HalTimerInterruptEnable?relay
        EXTERN ??halProcessTimer1?relay
        EXTERN ??halProcessTimer3?relay
        EXTERN ??halProcessTimer4?relay
        EXTERN ??halTimerRemap?relay
        EXTERN ??halTimerSendCallBack?relay
        EXTERN ??halTimerSetChannelMode?relay
        EXTERN ??halTimerSetCount?relay
        EXTERN ??halTimerSetOpMode?relay
        EXTERN ??halTimerSetPrescale?relay
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_MUL
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalTimerConfig?relay
        FUNCTION ??HalTimerConfig?relay,0203H
        PUBLIC ??HalTimerInit?relay
        FUNCTION ??HalTimerInit?relay,0203H
        PUBLIC ??HalTimerInterruptEnable?relay
        FUNCTION ??HalTimerInterruptEnable?relay,0203H
        PUBLIC ??HalTimerStart?relay
        FUNCTION ??HalTimerStart?relay,0203H
        PUBLIC ??HalTimerStop?relay
        FUNCTION ??HalTimerStop?relay,0203H
        PUBLIC ??HalTimerTick?relay
        FUNCTION ??HalTimerTick?relay,0203H
        PUBLIC ??halProcessTimer1?relay
        FUNCTION ??halProcessTimer1?relay,0203H
        PUBLIC ??halProcessTimer3?relay
        FUNCTION ??halProcessTimer3?relay,0203H
        PUBLIC ??halProcessTimer4?relay
        FUNCTION ??halProcessTimer4?relay,0203H
        PUBWEAK `??halTimer1Isr??INTVEC 75`
        PUBWEAK `??halTimer3Isr??INTVEC 91`
        PUBWEAK `??halTimer4Isr??INTVEC 99`
        PUBLIC ??halTimerRemap?relay
        FUNCTION ??halTimerRemap?relay,0203H
        PUBLIC ??halTimerSendCallBack?relay
        FUNCTION ??halTimerSendCallBack?relay,0203H
        PUBLIC ??halTimerSetChannelMode?relay
        FUNCTION ??halTimerSetChannelMode?relay,0203H
        PUBLIC ??halTimerSetCount?relay
        FUNCTION ??halTimerSetCount?relay,0203H
        PUBLIC ??halTimerSetOpMode?relay
        FUNCTION ??halTimerSetOpMode?relay,0203H
        PUBLIC ??halTimerSetPrescale?relay
        FUNCTION ??halTimerSetPrescale?relay,0203H
        PUBLIC HalTimerConfig
        FUNCTION HalTimerConfig,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC HalTimerInit
        FUNCTION HalTimerInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalTimerInterruptEnable
        FUNCTION HalTimerInterruptEnable,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalTimerStart
        FUNCTION HalTimerStart,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC HalTimerStop
        FUNCTION HalTimerStop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalTimerTick
        FUNCTION HalTimerTick,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P1DIR
        PUBWEAK T1CCTL0
        PUBWEAK T1CCTL1
        PUBWEAK T1CCTL2
        PUBWEAK T1CNTL
        PUBWEAK T1CTL
        PUBWEAK T1STAT
        PUBWEAK T3CCTL0
        PUBWEAK T3CCTL1
        PUBWEAK T3CTL
        PUBWEAK T4CCTL0
        PUBWEAK T4CCTL1
        PUBWEAK T4CTL
        PUBWEAK _A_IEN1
        PUBWEAK _A_P1
        PUBWEAK _A_TIMIF
        PUBLIC halProcessTimer1
        FUNCTION halProcessTimer1,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halProcessTimer3
        FUNCTION halProcessTimer3,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halProcessTimer4
        FUNCTION halProcessTimer4,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimer1Isr
        FUNCTION halTimer1Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halTimer3Isr
        FUNCTION halTimer3Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halTimer4Isr
        FUNCTION halTimer4Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halTimerRemap
        FUNCTION halTimerRemap,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimerSendCallBack
        FUNCTION halTimerSendCallBack,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halTimerSetChannelMode
        FUNCTION halTimerSetChannelMode,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimerSetCount
        FUNCTION halTimerSetCount,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC halTimerSetOpMode
        FUNCTION halTimerSetOpMode,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimerSetPrescale
        FUNCTION halTimerSetPrescale,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Hal_IR_RCVD_Int_Config SYMBOL "Hal_IR_RCVD_Int_Config"
initUARTtest        SYMBOL "initUARTtest"
UartTX_Send_String  SYMBOL "UartTX_Send_String"
??Hal_IR_RCVD_Int_Config?relay SYMBOL "?relay", Hal_IR_RCVD_Int_Config
??UartTX_Send_String?relay SYMBOL "?relay", UartTX_Send_String
??initUARTtest?relay SYMBOL "?relay", initUARTtest
HalTimerConfig      SYMBOL "HalTimerConfig"
??HalTimerConfig?relay SYMBOL "?relay", HalTimerConfig
HalTimerInit        SYMBOL "HalTimerInit"
??HalTimerInit?relay SYMBOL "?relay", HalTimerInit
HalTimerInterruptEnable SYMBOL "HalTimerInterruptEnable"
??HalTimerInterruptEnable?relay SYMBOL "?relay", HalTimerInterruptEnable
HalTimerStart       SYMBOL "HalTimerStart"
??HalTimerStart?relay SYMBOL "?relay", HalTimerStart
HalTimerStop        SYMBOL "HalTimerStop"
??HalTimerStop?relay SYMBOL "?relay", HalTimerStop
HalTimerTick        SYMBOL "HalTimerTick"
??HalTimerTick?relay SYMBOL "?relay", HalTimerTick
halProcessTimer1    SYMBOL "halProcessTimer1"
??halProcessTimer1?relay SYMBOL "?relay", halProcessTimer1
halProcessTimer3    SYMBOL "halProcessTimer3"
??halProcessTimer3?relay SYMBOL "?relay", halProcessTimer3
halProcessTimer4    SYMBOL "halProcessTimer4"
??halProcessTimer4?relay SYMBOL "?relay", halProcessTimer4
halTimer1Isr        SYMBOL "halTimer1Isr"
`??halTimer1Isr??INTVEC 75` SYMBOL "??INTVEC 75", halTimer1Isr
halTimer3Isr        SYMBOL "halTimer3Isr"
`??halTimer3Isr??INTVEC 91` SYMBOL "??INTVEC 91", halTimer3Isr
halTimer4Isr        SYMBOL "halTimer4Isr"
`??halTimer4Isr??INTVEC 99` SYMBOL "??INTVEC 99", halTimer4Isr
halTimerRemap       SYMBOL "halTimerRemap"
??halTimerRemap?relay SYMBOL "?relay", halTimerRemap
halTimerSendCallBack SYMBOL "halTimerSendCallBack"
??halTimerSendCallBack?relay SYMBOL "?relay", halTimerSendCallBack
halTimerSetChannelMode SYMBOL "halTimerSetChannelMode"
??halTimerSetChannelMode?relay SYMBOL "?relay", halTimerSetChannelMode
halTimerSetCount    SYMBOL "halTimerSetCount"
??halTimerSetCount?relay SYMBOL "?relay", halTimerSetCount
halTimerSetOpMode   SYMBOL "halTimerSetOpMode"
??halTimerSetOpMode?relay SYMBOL "?relay", halTimerSetOpMode
halTimerSetPrescale SYMBOL "halTimerSetPrescale"
??halTimerSetPrescale?relay SYMBOL "?relay", halTimerSetPrescale

        EXTERN Hal_IR_RCVD_Int_Config
        FUNCTION Hal_IR_RCVD_Int_Config,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN initUARTtest
        FUNCTION initUARTtest,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UartTX_Send_String
        FUNCTION UartTX_Send_String,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??Hal_IR_RCVD_Int_Config?relay
        FUNCTION ??Hal_IR_RCVD_Int_Config?relay,00H
        EXTERN ??UartTX_Send_String?relay
        FUNCTION ??UartTX_Send_String?relay,00H
        EXTERN ??initUARTtest?relay
        FUNCTION ??initUARTtest?relay,00H
        EXTERN IR_Encoding
        EXTERN T1_CNT1

// E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Components\hal\target\CC2530EB\hal_timer.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_timer.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:   This file contains the interface to the Timer Service.
//    7 
//    8 
//    9   Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 /*********************************************************************
//   40  NOTE: The following mapping is done between the logical timer
//   41        names defined in HAL_TIMER.H and the physical HW timer.
//   42 
//   43        HAL_TIMER_0 --> HW Timer 3  (8-bits)
//   44        HAL_TIMER_2 --> HW Timer 4  (8-bits)
//   45        HAL_TIMER_3 --> HW Timer 1  (16-bits)
//   46 
//   47  NOTE: The timer code assumes only one channel, CHANNEL 0, is used
//   48        for each timer.  There is currently no support for other
//   49        channels.
//   50 
//   51  NOTE: Only Output Compare Mode is supported.  There is no provision
//   52        to support Input Capture Mode.
//   53 
//   54  NOTE: There is no support to map the output of the timers to a
//   55        physical I/O pin
//   56 
//   57 *********************************************************************/
//   58 /*********************************************************************
//   59  * INCLUDES
//   60  */
//   61 #include  "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0afH
// unsigned char volatile __sfr T1STAT
T1STAT:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cbH
// unsigned char volatile __sfr T3CTL
T3CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ccH
// unsigned char volatile __sfr T3CCTL0
T3CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ceH
// unsigned char volatile __sfr T3CCTL1
T3CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d8H
// union <unnamed> volatile __sfr _A_TIMIF
_A_TIMIF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e5H
// unsigned char volatile __sfr T1CCTL0
T1CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e6H
// unsigned char volatile __sfr T1CCTL1
T1CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e7H
// unsigned char volatile __sfr T1CCTL2
T1CCTL2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ebH
// unsigned char volatile __sfr T4CTL
T4CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ecH
// unsigned char volatile __sfr T4CCTL0
T4CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0eeH
// unsigned char volatile __sfr T4CCTL1
T4CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//   62 #include  "hal_defs.h"
//   63 #include  "hal_types.h"
//   64 #include  "hal_timer.h"
//   65 #include  "hal_IR.h"
//   66 
//   67 /*********************************************************************
//   68  * MACROS
//   69  */
//   70 
//   71 /*********************************************************************
//   72  * CONSTANTS
//   73  */
//   74 #define HW_TIMER_1        0x00
//   75 #define HW_TIMER_3        0x01
//   76 #define HW_TIMER_4        0x02
//   77 #define HW_TIMER_INVALID  0x03
//   78 #define HW_TIMER_MAX      0x03
//   79 
//   80 #define IEN1_T1IE     0x02    /* Timer1 Interrupt Enable */
//   81 #define IEN1_T3IE     0x08    /* Timer3 Interrupt Enable */
//   82 #define IEN1_T4IE     0x10    /* Timer4 Interrupt Enable */
//   83 
//   84 #define T1CTL_CH2IF   0x80
//   85 #define T1CTL_CH1IF   0x40
//   86 #define T1CTL_CH0IF   0x20
//   87 #define T1CTL_OVFIF   0x10
//   88 
//   89 #define TIMIF_T1OVFIM 0x40
//   90 #define TIMIF_T4CH1IF 0x20
//   91 #define TIMIF_T4CH0IF 0x10
//   92 #define TIMIF_T4OVFIF 0x08
//   93 #define TIMIF_T3CH1IF 0x04
//   94 #define TIMIF_T3CH0IF 0x02
//   95 #define TIMIF_T3OVFIF 0x01
//   96 
//   97 #define T34CTL_OVFIM  0x80
//   98 
//   99 #define T134CCTL_IM         0x40    /* Interrupt Mask */
//  100 #define T134CCTL_CMP_BITS   0x38    /* Bits[5:3] == CMP[2:0] */
//  101 #define T134CCTL_MODE       0x04    /* Capture(0)/Compare(1) mode */
//  102 #define T134CCTL_CAP_BITS   0x03    /* Bits[1:0] == CAP[1:0] */
//  103 
//  104 #define T134CCTL_CMP_OC     0x18    /* Set output on compare, clear at 0 */
//  105 #define T134CCTL_CAP_RE     0x01    /* Set input capture on rising edge */
//  106 
//  107 /* Timer clock pre-scaler definitions for 16bit timer1 */
//  108 #define HAL_TIMER1_16_TC_DIV1     0x00  /* No clock pre-scaling */
//  109 #define HAL_TIMER1_16_TC_DIV8     0x04  /* Clock pre-scaled by 8 */
//  110 #define HAL_TIMER1_16_TC_DIV32    0x08  /* Clock pre-scaled by 32 */
//  111 #define HAL_TIMER1_16_TC_DIV128   0x0c  /* Clock pre-scaled by 128 */
//  112 #define HAL_TIMER1_16_TC_BITS     0x0c  /* Bits 3:2 */
//  113 
//  114 /* Timer clock pre-scaler definitions for 8bit timer3 and timer4 */
//  115 #define HAL_TIMER34_8_TC_DIV1     0x00  /* No clock pre-scaling */
//  116 #define HAL_TIMER34_8_TC_DIV2     0x20  /* Clock pre-scaled by 2 */
//  117 #define HAL_TIMER34_8_TC_DIV4     0x40  /* Clock pre-scaled by 4 */
//  118 #define HAL_TIMER34_8_TC_DIV8     0x60  /* Clock pre-scaled by 8 */
//  119 #define HAL_TIMER34_8_TC_DIV16    0x80  /* Clock pre-scaled by 16 */
//  120 #define HAL_TIMER34_8_TC_DIV32    0xA0  /* Clock pre-scaled by 32 */
//  121 #define HAL_TIMER34_8_TC_DIV64    0xC0  /* Clock pre-scaled by 64 */
//  122 #define HAL_TIMER34_8_TC_DIV128   0xE0  /* Clock pre-scaled by 128 */
//  123 #define HAL_TIMER34_8_TC_BITS     0xE0  /* Bits 7:5 */
//  124 
//  125 /* Operation Mode definitions */
//  126 #define HAL_TIMER1_OPMODE_STOP      0x00  /* Free Running Mode, Count from 0 to Max */
//  127 #define HAL_TIMER1_OPMODE_FREERUN   0x01  /* Free Running Mode, Count from 0 to Max */
//  128 #define HAL_TIMER1_OPMODE_MODULO    0x02  /* Modulo Mode, Count from 0 to CompareValue */
//  129 #define HAL_TIMER1_OPMODE_BITS      0x03  /* Bits 1:0 */
//  130 
//  131 #define HAL_TIMER34_START           0x10  /* Timer3 and Timer4 have separate Start bit */
//  132 #define HAL_TIMER34_OPMODE_FREERUN  0x00  /* Free Running Mode, Count from 0 to Max */
//  133 #define HAL_TIMER34_OPMODE_MODULO   0x02  /* Modulo Mode, Count from 0 to CompareValue */
//  134 #define HAL_TIMER34_OPMODE_BITS     0x03  /* Bits 1:0 */
//  135 
//  136 #define HAL_TIMER_MODE_STOP         0x03
//  137 
//  138 /* Prescale settings */
//  139 #define HAL_TIMER1_16_PRESCALE      HAL_TIMER1_16_TC_DIV128
//  140 #define HAL_TIMER1_16_PRESCALE_VAL  128
//  141 #define HAL_TIMER3_8_PRESCALE       HAL_TIMER34_8_TC_DIV128
//  142 #define HAL_TIMER3_8_PRESCALE_VAL   128
//  143 #define HAL_TIMER4_8_PRESCALE       HAL_TIMER34_8_TC_DIV128
//  144 #define HAL_TIMER4_8_PRESCALE_VAL   128
//  145 
//  146 /* Clock settings */
//  147 #define HAL_TIMER_16MHZ           16
//  148 #define HAL_TIMER_32MHZ           32
//  149 
//  150 /* Default all timers to use channel 0 */
//  151 #define TCHN_T1CCTL   &(X_T1CCTL0)
//  152 #define TCHN_T1CCL    &(X_T1CC0L)
//  153 #define TCHN_T1CCH    &(X_T1CC0H)
//  154 #define TCNH_T1OVF    &(X_TIMIF)
//  155 #define TCHN_T1OVFBIT TIMIF_T1OVFIM
//  156 #define TCHN_T1INTBIT IEN1_T1IE
//  157 
//  158 #define TCHN_T3CCTL   &(X_T3CCTL0)
//  159 #define TCHN_T3CCL    &(X_T3CC0)
//  160 #define TCHN_T3CCH    &(X_T3CC0)
//  161 #define TCNH_T3OVF    &(X_T3CTL)
//  162 #define TCHN_T3OVFBIT T34CTL_OVFIM
//  163 #define TCHN_T3INTBIT IEN1_T3IE
//  164 
//  165 #define TCHN_T4CCTL   &(X_T4CCTL0)
//  166 #define TCHN_T4CCL    &(X_T4CC0)
//  167 #define TCHN_T4CCH    &(X_T4CC0)
//  168 #define TCNH_T4OVF    &(X_T4CTL)
//  169 #define TCHN_T4OVFBIT T34CTL_OVFIM
//  170 #define TCHN_T4INTBIT IEN1_T4IE
//  171 
//  172 /*********************************************************************
//  173  * TYPEDEFS
//  174  */
//  175 typedef struct
//  176 {
//  177   bool configured;
//  178   bool intEnable;
//  179   uint8 opMode;
//  180   uint8 channel;
//  181   uint8 channelMode;
//  182   uint8 prescale;
//  183   uint8 prescaleVal;
//  184   uint8 clock;
//  185   halTimerCBack_t callBackFunc;
//  186 } halTimerSettings_t;
//  187 
//  188 typedef struct
//  189 {
//  190   uint8 volatile XDATA *TxCCTL;
//  191   uint8 volatile XDATA *TxCCH;
//  192   uint8 volatile XDATA *TxCCL;
//  193   uint8 volatile XDATA *TxOVF;
//  194   uint8 ovfbit;
//  195   uint8 intbit;
//  196 } halTimerChannel_t;
//  197 
//  198 /*********************************************************************
//  199  * GLOBAL VARIABLES
//  200  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  201 static halTimerSettings_t halTimerRecord[HW_TIMER_MAX];
halTimerRecord:
        DS 30
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  202 static halTimerChannel_t  halTimerChannel[HW_TIMER_MAX];
halTimerChannel:
        DS 30
        REQUIRE __INIT_XDATA_Z
//  203 
//  204 /*********************************************************************
//  205  * FUNCTIONS - External
//  206  */
//  207 
//  208 /*********************************************************************
//  209  * FUNCTIONS - Local
//  210  */
//  211 uint8 halTimerSetCount (uint8 cc2430id, uint32 timePerTick);
//  212 uint8 halTimerSetPrescale (uint8 cc2430id, uint8 prescale);
//  213 uint8 halTimerSetOpMode (uint8 cc2430id, uint8 opMode);
//  214 uint8 halTimerSetChannelMode (uint8 cc2430id, uint8 channelMode);
//  215 void halTimerSendCallBack (uint8 timerId, uint8 channel, uint8 channelMode);
//  216 uint8 halTimerRemap (uint8 timerId);
//  217 void halProcessTimer1 (void);
//  218 void halProcessTimer3 (void);
//  219 void halProcessTimer4 (void);
//  220 
//  221 
//  222 /*********************************************************************
//  223  * FUNCTIONS - API
//  224  */
//  225 
//  226 /*********************************************************************
//  227  * @fn      HalTimerInit
//  228  *
//  229  * @brief   Initialize Timer Service
//  230  *
//  231  * @param   None
//  232  *
//  233  * @return  None
//  234  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  235 void HalTimerInit (void)
HalTimerInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalTimerInit
//  236 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  237   T1CCTL0 = 0;    /* Make sure interrupts are disabled */
        MOV     0xe5,#0x0
//  238   T1CCTL1 = 0;    /* Make sure interrupts are disabled */
        MOV     0xe6,#0x0
//  239   T1CCTL2 = 0;    /* Make sure interrupts are disabled */
        MOV     0xe7,#0x0
//  240   T3CCTL0 = 0;    /* Make sure interrupts are disabled */
        MOV     0xcc,#0x0
//  241   T3CCTL1 = 0;    /* Make sure interrupts are disabled */
        MOV     0xce,#0x0
//  242   T4CCTL0 = 0;    /* Make sure interrupts are disabled */
        MOV     0xec,#0x0
//  243   T4CCTL1 = 0;    /* Make sure interrupts are disabled */
        MOV     0xee,#0x0
//  244 
//  245   /* Setup prescale & clock for timer0 */
//  246   halTimerRecord[HW_TIMER_1].prescale    = HAL_TIMER1_16_PRESCALE;
        MOV     A,#0xc
        MOV     DPTR,#(halTimerRecord + 5)
        MOVX    @DPTR,A
//  247   halTimerRecord[HW_TIMER_1].clock       = HAL_TIMER_32MHZ;
        MOV     A,#0x20
        MOV     DPTR,#(halTimerRecord + 7)
        MOVX    @DPTR,A
//  248   halTimerRecord[HW_TIMER_1].prescaleVal = HAL_TIMER1_16_PRESCALE_VAL;
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerRecord + 6)
        MOVX    @DPTR,A
//  249 
//  250   /* Setup prescale & clock for timer2 */
//  251   halTimerRecord[HW_TIMER_3].prescale    = HAL_TIMER3_8_PRESCALE;
        MOV     A,#-0x20
        MOV     DPTR,#(halTimerRecord + 15)
        MOVX    @DPTR,A
//  252   halTimerRecord[HW_TIMER_3].clock       = HAL_TIMER_32MHZ;
        MOV     A,#0x20
        MOV     DPTR,#(halTimerRecord + 17)
        MOVX    @DPTR,A
//  253   halTimerRecord[HW_TIMER_3].prescaleVal = HAL_TIMER3_8_PRESCALE_VAL;
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerRecord + 16)
        MOVX    @DPTR,A
//  254 
//  255   /* Setup prescale & clock for timer3 */
//  256   halTimerRecord[HW_TIMER_4].prescale    = HAL_TIMER4_8_PRESCALE;
        MOV     A,#-0x20
        MOV     DPTR,#(halTimerRecord + 25)
        MOVX    @DPTR,A
//  257   halTimerRecord[HW_TIMER_4].clock       = HAL_TIMER_32MHZ;
        MOV     A,#0x20
        MOV     DPTR,#(halTimerRecord + 27)
        MOVX    @DPTR,A
//  258   halTimerRecord[HW_TIMER_4].prescaleVal = HAL_TIMER4_8_PRESCALE_VAL;
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerRecord + 26)
        MOVX    @DPTR,A
//  259 
//  260   /* Setup Timer1 Channel structure */
//  261   halTimerChannel[HW_TIMER_1].TxCCTL =  TCHN_T1CCTL;
        MOV     DPTR,#halTimerChannel
        MOV     A,#-0x1b
        LCALL   ??Subroutine14_0 & 0xFFFF
//  262   halTimerChannel[HW_TIMER_1].TxCCL =   TCHN_T1CCL;
??CrossCallReturnLabel_18:
        MOV     DPTR,#(halTimerChannel + 4)
        MOV     A,#-0x26
        LCALL   ??Subroutine14_0 & 0xFFFF
//  263   halTimerChannel[HW_TIMER_1].TxCCH =   TCHN_T1CCH;
??CrossCallReturnLabel_19:
        MOV     DPTR,#(halTimerChannel + 2)
        MOV     A,#-0x25
        LCALL   ??Subroutine14_0 & 0xFFFF
//  264   halTimerChannel[HW_TIMER_1].TxOVF =   TCNH_T1OVF;
??CrossCallReturnLabel_20:
        MOV     DPTR,#(halTimerChannel + 6)
        MOV     A,#-0x28
        LCALL   ??Subroutine14_0 & 0xFFFF
//  265   halTimerChannel[HW_TIMER_1].ovfbit =  TCHN_T1OVFBIT;
??CrossCallReturnLabel_21:
        MOV     A,#0x40
        MOV     DPTR,#(halTimerChannel + 8)
        MOVX    @DPTR,A
//  266   halTimerChannel[HW_TIMER_1].intbit =  TCHN_T1INTBIT;
        MOV     A,#0x2
        MOV     DPTR,#(halTimerChannel + 9)
        MOVX    @DPTR,A
//  267 
//  268   /* Setup Timer3 Channel structure */
//  269   halTimerChannel[HW_TIMER_3].TxCCTL =  TCHN_T3CCTL;
        MOV     DPTR,#(halTimerChannel + 10)
        MOV     A,#-0x34
        LCALL   ??Subroutine14_0 & 0xFFFF
//  270   halTimerChannel[HW_TIMER_3].TxCCL =   TCHN_T3CCL;
??CrossCallReturnLabel_22:
        MOV     DPTR,#(halTimerChannel + 14)
        LCALL   ?Subroutine0 & 0xFFFF
//  271   halTimerChannel[HW_TIMER_3].TxCCH =   TCHN_T3CCH;
??CrossCallReturnLabel_28:
        MOV     DPTR,#(halTimerChannel + 12)
        LCALL   ?Subroutine0 & 0xFFFF
//  272   halTimerChannel[HW_TIMER_3].TxOVF =   TCNH_T3OVF;
??CrossCallReturnLabel_29:
        MOV     DPTR,#(halTimerChannel + 16)
        MOV     A,#-0x35
        LCALL   ??Subroutine14_0 & 0xFFFF
//  273   halTimerChannel[HW_TIMER_3].ovfbit =  TCHN_T3OVFBIT;
??CrossCallReturnLabel_23:
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerChannel + 18)
        MOVX    @DPTR,A
//  274   halTimerChannel[HW_TIMER_3].intbit =  TCHN_T3INTBIT;
        MOV     A,#0x8
        MOV     DPTR,#(halTimerChannel + 19)
        MOVX    @DPTR,A
//  275 
//  276   /* Setup Timer4 Channel structure */
//  277   halTimerChannel[HW_TIMER_4].TxCCTL =  TCHN_T4CCTL;
        MOV     DPTR,#(halTimerChannel + 20)
        MOV     A,#-0x14
        LCALL   ??Subroutine14_0 & 0xFFFF
//  278   halTimerChannel[HW_TIMER_4].TxCCL =   TCHN_T4CCL;
??CrossCallReturnLabel_24:
        MOV     DPTR,#(halTimerChannel + 24)
        MOV     A,#-0x13
        LCALL   ??Subroutine14_0 & 0xFFFF
//  279   halTimerChannel[HW_TIMER_4].TxCCH =   TCHN_T4CCH;
??CrossCallReturnLabel_25:
        MOV     DPTR,#(halTimerChannel + 22)
        MOV     A,#-0x13
        LCALL   ??Subroutine14_0 & 0xFFFF
//  280   halTimerChannel[HW_TIMER_4].TxOVF =   TCNH_T4OVF;
??CrossCallReturnLabel_26:
        MOV     DPTR,#(halTimerChannel + 26)
        MOV     A,#-0x15
        LCALL   ??Subroutine14_0 & 0xFFFF
//  281   halTimerChannel[HW_TIMER_4].ovfbit =  TCHN_T4OVFBIT;
??CrossCallReturnLabel_27:
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerChannel + 28)
        MOVX    @DPTR,A
//  282   halTimerChannel[HW_TIMER_4].intbit =  TCHN_T4INTBIT;
        MOV     A,#0x10
        MOV     DPTR,#(halTimerChannel + 29)
        MOVX    @DPTR,A
//  283 }
        LJMP    ?Subroutine11 & 0xFFFF
        CFI EndBlock cfiBlock0
        REQUIRE T3CCTL0
        REQUIRE T3CCTL1
        REQUIRE T1CCTL0
        REQUIRE T1CCTL1
        REQUIRE T1CCTL2
        REQUIRE T4CCTL0
        REQUIRE T4CCTL1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond2) CFA_SP SP+-5
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     A,#-0x33
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond7) CFA_SP SP+-5
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond8) CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond9) CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond10) CFA_SP SP+-5
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond11) CFA_SP SP+-5
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond12) CFA_SP SP+-5
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond13) CFA_SP SP+-5
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond14) CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond15) CFA_SP SP+-5
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x70
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  284 
//  285 /***************************************************************************************************
//  286  * @fn      HalTimerConfig
//  287  *
//  288  * @brief   Configure the Timer Serivce
//  289  *
//  290  * @param   timerId - Id of the timer
//  291  *          opMode  - Operation mode
//  292  *          channel - Channel where the counter operates on
//  293  *          channelMode - Mode of that channel
//  294  *          prescale - Prescale of the clock
//  295  *          cBack - Pointer to the callback function
//  296  *
//  297  * @return  Status of the configuration
//  298  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  299 uint8 HalTimerConfig (uint8 timerId, uint8 opMode, uint8 channel, uint8 channelMode,
HalTimerConfig:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function HalTimerConfig
//  300                       bool intEnable, halTimerCBack_t cBack)
//  301 {
        FUNCALL HalTimerConfig, halTimerRemap
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  302   uint8 hwtimerid;
//  303 
//  304   hwtimerid = halTimerRemap (timerId);
        ; Setup parameters for call to function halTimerRemap
        LCALL   ??halTimerRemap?relay
        MOV     A,R1
        MOV     R2,A
//  305 
//  306   if ((opMode & HAL_TIMER_MODE_MASK) && (timerId < HAL_TIMER_MAX) &&
//  307       (channelMode & HAL_TIMER_CHANNEL_MASK) && (channel & HAL_TIMER_CHANNEL_MASK))
        MOV     A,#0x3
        ANL     A,?V0 + 0
        JZ      ??HalTimerConfig_0
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,#0x4
        JNC     ??HalTimerConfig_0
        MOV     A,#0xf
        ANL     A,?V0 + 2
        JZ      ??HalTimerConfig_0
        MOV     A,#0xf
        ANL     A,?V0 + 1
        JZ      ??HalTimerConfig_0
//  308   {
//  309     halTimerRecord[hwtimerid].configured    = TRUE;
        MOV     A,R2
        MOV     B,#0xa
        MUL     AB
        ADD     A,#(halTimerRecord & 0xff)
        MOV     R0,A
        MOV     A,B
        ADDC    A,#((halTimerRecord >> 8) & 0xff)
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,#0x1
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  310     halTimerRecord[hwtimerid].opMode        = opMode;
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        LCALL   ?Subroutine8 & 0xFFFF
//  311     halTimerRecord[hwtimerid].channel       = channel;
??CrossCallReturnLabel_14:
        MOV     A,?V0 + 1
        LCALL   ?Subroutine2 & 0xFFFF
//  312     halTimerRecord[hwtimerid].channelMode   = channelMode;
??CrossCallReturnLabel_0:
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  313     halTimerRecord[hwtimerid].intEnable     = intEnable;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  314     halTimerRecord[hwtimerid].callBackFunc  = cBack;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  315   }
//  316   else
//  317   {
//  318     return HAL_TIMER_PARAMS_ERROR;
//  319   }
//  320   return HAL_TIMER_OK;
        MOV     R1,#0x0
        SJMP    ??HalTimerConfig_1
??HalTimerConfig_0:
        MOV     R1,#0x2
??HalTimerConfig_1:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock17
//  321 }
//  322 
//  323 
//  324 /***************************************************************************************************
//  325  * @fn      HalTimerStart
//  326  *
//  327  * @brief   Start the Timer Service
//  328  *
//  329  * @param   timerId      - ID of the timer
//  330  *          timerPerTick - number of micro sec per tick, (ticks x prescale) / clock = usec/tick
//  331  *
//  332  * @return  Status - OK or Not OK
//  333  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  334 uint8 HalTimerStart (uint8 timerId, uint32 timePerTick)
HalTimerStart:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function HalTimerStart
//  335 {
        FUNCALL HalTimerStart, halTimerRemap
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, halTimerSetCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, halTimerSetPrescale
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, halTimerSetOpMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, halTimerSetChannelMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, HalTimerInterruptEnable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  336   uint8 hwtimerid;
//  337 
//  338   hwtimerid = halTimerRemap (timerId);
        ; Setup parameters for call to function halTimerRemap
        LCALL   ??halTimerRemap?relay
        MOV     A,R1
        MOV     R6,A
//  339 
//  340   if (halTimerRecord[hwtimerid].configured)
        MOV     B,#0xa
        MUL     AB
        ADD     A,#(halTimerRecord & 0xff)
        MOV     ?V0 + 4,A
        MOV     A,B
        ADDC    A,#((halTimerRecord >> 8) & 0xff)
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??HalTimerStart_0
//  341   {
//  342     halTimerSetCount (hwtimerid, timePerTick);
        ; Setup parameters for call to function halTimerSetCount
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   ??halTimerSetCount?relay
//  343     halTimerSetPrescale (hwtimerid, halTimerRecord[hwtimerid].prescale);
        ; Setup parameters for call to function halTimerSetPrescale
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??halTimerSetPrescale?relay
//  344     halTimerSetOpMode (hwtimerid, halTimerRecord[hwtimerid].opMode);
        ; Setup parameters for call to function halTimerSetOpMode
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??halTimerSetOpMode?relay
//  345     halTimerSetChannelMode (hwtimerid, halTimerRecord[hwtimerid].channelMode);
        MOV     A,?V0 + 4
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function halTimerSetChannelMode
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??halTimerSetChannelMode?relay
//  346 
//  347     if (hwtimerid == HW_TIMER_3)
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??HalTimerStart_1
//  348     {
//  349       T3CTL |= HAL_TIMER34_START;
        ORL     0xcb,#0x10
        SJMP    ??HalTimerStart_2
//  350     }
//  351     if (hwtimerid == HW_TIMER_4)
??HalTimerStart_1:
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??HalTimerStart_2
//  352     {
//  353       T4CTL |= HAL_TIMER34_START;
        ORL     0xeb,#0x10
//  354     }
//  355     HalTimerInterruptEnable (hwtimerid, halTimerRecord[hwtimerid].channelMode,
//  356                              halTimerRecord[hwtimerid].intEnable);
??HalTimerStart_2:
        ; Setup parameters for call to function HalTimerInterruptEnable
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalTimerInterruptEnable?relay
//  357   }
//  358   else
//  359   {
//  360     return HAL_TIMER_NOT_CONFIGURED;
//  361   }
//  362   return HAL_TIMER_OK;
        MOV     R1,#0x0
        SJMP    ??HalTimerStart_3
??HalTimerStart_0:
        MOV     R1,#0x3
??HalTimerStart_3:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock18
        REQUIRE T3CTL
        REQUIRE T4CTL
//  363 }
//  364 
//  365 /***************************************************************************************************
//  366  * @fn      HalTimerTick
//  367  *
//  368  * @brief   Check the counter for expired counter.
//  369  *
//  370  * @param   None
//  371  *
//  372  * @return  None
//  373  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 void HalTimerTick (void)
HalTimerTick:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function HalTimerTick
//  375 {
        FUNCALL HalTimerTick, halProcessTimer1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerTick, halProcessTimer3
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerTick, halProcessTimer4
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  376   if (!halTimerRecord[HW_TIMER_1].intEnable)
        MOV     DPTR,#(halTimerRecord + 1)
        MOVX    A,@DPTR
        JNZ     ??HalTimerTick_0
//  377   {
//  378     halProcessTimer1 ();
        ; Setup parameters for call to function halProcessTimer1
        LCALL   ??halProcessTimer1?relay
//  379   }
//  380 
//  381   if (!halTimerRecord[HW_TIMER_3].intEnable)
??HalTimerTick_0:
        MOV     DPTR,#(halTimerRecord + 11)
        MOVX    A,@DPTR
        JNZ     ??HalTimerTick_1
//  382   {
//  383     halProcessTimer3 ();
        ; Setup parameters for call to function halProcessTimer3
        LCALL   ??halProcessTimer3?relay
//  384   }
//  385 
//  386   if (!halTimerRecord[HW_TIMER_4].intEnable)
??HalTimerTick_1:
        MOV     DPTR,#(halTimerRecord + 21)
        MOVX    A,@DPTR
        JNZ     ??HalTimerTick_2
//  387   {
//  388     halProcessTimer4 ();
        ; Setup parameters for call to function halProcessTimer4
        LCALL   ??halProcessTimer4?relay
//  389   }
//  390 }
??HalTimerTick_2:
        LJMP    ?Subroutine11 & 0xFFFF
        CFI EndBlock cfiBlock19
//  391 
//  392 /***************************************************************************************************
//  393  * @fn      HalTimerStop
//  394  *
//  395  * @brief   Stop the Timer Service
//  396  *
//  397  * @param   timerId - ID of the timer
//  398  *
//  399  * @return  Status - OK or Not OK
//  400  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  401 uint8 HalTimerStop (uint8 timerId)
HalTimerStop:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function HalTimerStop
//  402 {
        FUNCALL HalTimerStop, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStop, halTimerSetOpMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  403   uint8 hwtimerid;
//  404 
//  405   hwtimerid = halTimerRemap (timerId);
//  406 
//  407   switch (hwtimerid)
        ; Setup parameters for call to function halTimerRemap
        LCALL   ??halTimerRemap?relay
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for HalTimerStop>_0`:
        DATA
        DB        0
        DB        2
        DW        ??HalTimerStop_0
        DW        ??HalTimerStop_1
        DW        ??HalTimerStop_2
        DW        ??HalTimerStop_3
        CODE
//  408   {
//  409     case HW_TIMER_1:
//  410       halTimerSetOpMode(HW_TIMER_1, HAL_TIMER_MODE_STOP);
??HalTimerStop_1:
        ; Setup parameters for call to function halTimerSetOpMode
        MOV     R2,#0x3
        MOV     R1,#0x0
        LCALL   ??halTimerSetOpMode?relay
//  411       break;
//  412     case HW_TIMER_3:
//  413       T3CTL &= ~(HAL_TIMER34_START);
//  414       break;
//  415     case HW_TIMER_4:
//  416       T4CTL &= ~(HAL_TIMER34_START);
//  417       break;
//  418     default:
//  419       return HAL_TIMER_INVALID_ID;
//  420   }
//  421   return HAL_TIMER_OK;
??HalTimerStop_4:
        MOV     R1,#0x0
??HalTimerStop_5:
        LJMP    ?Subroutine11 & 0xFFFF
??HalTimerStop_2:
        ANL     0xcb,#0xef
        SJMP    ??HalTimerStop_4
??HalTimerStop_3:
        ANL     0xeb,#0xef
        SJMP    ??HalTimerStop_4
??HalTimerStop_0:
        MOV     R1,#0x4
        SJMP    ??HalTimerStop_5
        CFI EndBlock cfiBlock20
        REQUIRE T3CTL
        REQUIRE T4CTL
//  422 }
//  423 
//  424 /***************************************************************************************************
//  425  * @fn      halTimerSetCount
//  426  *
//  427  * @brief   Stop the Timer Service
//  428  *
//  429  * @param   hwtimerid - ID of the timer
//  430  *          timerPerTick - Number micro sec per ticks
//  431  *
//  432  * @return  Status - OK or Not OK
//  433  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  434 uint8 halTimerSetCount (uint8 hwtimerid, uint32 timePerTick)
halTimerSetCount:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function halTimerSetCount
//  435 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  436   uint16  count;
//  437   uint8   high, low;
//  438 
//  439   /* Load count = ((sec/tick) x clock) / prescale */
//  440   count = (uint16)((timePerTick * halTimerRecord[hwtimerid].clock) / halTimerRecord[hwtimerid].prescaleVal);
        MOV     A,R1
        MOV     B,#0xa
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        ADD     A,#(halTimerRecord & 0xff)
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#((halTimerRecord >> 8) & 0xff)
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
//  441   high = (uint8) (count >> 8);
//  442   low = (uint8) count;
//  443 
//  444   *(halTimerChannel[hwtimerid].TxCCH) = high;
        MOV     A,R2
        ADD     A,#(halTimerChannel & 0xff)
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#((halTimerChannel >> 8) & 0xff)
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  445   *(halTimerChannel[hwtimerid].TxCCL) = low;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  446 
//  447   return HAL_TIMER_OK;
        MOV     R1,#0x0
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21
//  448 }
//  449 
//  450 /***************************************************************************************************
//  451  * @fn      halTimerSetPrescale
//  452  *
//  453  * @brief   Stop the Timer Service
//  454  *
//  455  * @param   hwtimerid - ID of the timer
//  456  *          prescale - Prescale of the clock
//  457  *
//  458  * @return  Status - OK or Not OK
//  459  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  460 uint8 halTimerSetPrescale (uint8 hwtimerid, uint8 prescale)
halTimerSetPrescale:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function halTimerSetPrescale
//  461 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  462   switch (hwtimerid)
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetPrescale>_0`:
        DATA
        DB        0
        DB        2
        DW        ??halTimerSetPrescale_0
        DW        ??halTimerSetPrescale_1
        DW        ??halTimerSetPrescale_2
        DW        ??halTimerSetPrescale_3
        CODE
//  463   {
//  464     case HW_TIMER_1:
//  465       T1CTL &= ~(HAL_TIMER1_16_TC_BITS);
??halTimerSetPrescale_1:
        ANL     0xe4,#0xf3
        MOV     A,0xe4
//  466       T1CTL |= prescale;
        MOV     A,R2
        ORL     A,0xe4
        MOV     0xe4,A
//  467       break;
//  468     case HW_TIMER_3:
//  469       T3CTL &= ~(HAL_TIMER34_8_TC_BITS);
//  470       T3CTL |= prescale;
//  471       break;
//  472     case HW_TIMER_4:
//  473       T4CTL &= ~(HAL_TIMER34_8_TC_BITS);
//  474       T4CTL |= prescale;
//  475       break;
//  476     default:
//  477       return HAL_TIMER_INVALID_ID;
//  478   }
//  479   return HAL_TIMER_OK;
??halTimerSetPrescale_4:
        MOV     R1,#0x0
??halTimerSetPrescale_5:
        LJMP    ?Subroutine11 & 0xFFFF
??halTimerSetPrescale_2:
        ANL     0xcb,#0x1f
        MOV     A,0xcb
        MOV     A,R2
        ORL     A,0xcb
        MOV     0xcb,A
        SJMP    ??halTimerSetPrescale_4
??halTimerSetPrescale_3:
        ANL     0xeb,#0x1f
        MOV     A,0xeb
        MOV     A,R2
        ORL     A,0xeb
        MOV     0xeb,A
        SJMP    ??halTimerSetPrescale_4
??halTimerSetPrescale_0:
        MOV     R1,#0x4
        SJMP    ??halTimerSetPrescale_5
        CFI EndBlock cfiBlock22
        REQUIRE T3CTL
        REQUIRE T1CTL
        REQUIRE T4CTL
//  480 }
//  481 
//  482 /***************************************************************************************************
//  483  * @fn      halTimerSetOpMode
//  484  *
//  485  * @brief   Setup operate modes
//  486  *
//  487  * @param   hwtimerid - ID of the timer
//  488  *          opMode - operation mode of the timer
//  489  *
//  490  * @return  Status - OK or Not OK
//  491  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  492 uint8 halTimerSetOpMode (uint8 hwtimerid, uint8 opMode)
halTimerSetOpMode:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function halTimerSetOpMode
//  493 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  494   /* Load Waveform Generation Mode */
//  495   switch (opMode)
        MOV     A,R2
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetOpMode>_0`:
        DATA
        DB        1
        DB        2
        DW        ??halTimerSetOpMode_0
        DW        ??halTimerSetOpMode_1
        DW        ??halTimerSetOpMode_2
        DW        ??halTimerSetOpMode_3
        CODE
//  496   {
//  497     case HAL_TIMER_MODE_NORMAL:
//  498       switch (hwtimerid)
??halTimerSetOpMode_1:
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetOpMode>_1`:
        DATA
        DB        0
        DB        2
        DW        ??halTimerSetOpMode_4
        DW        ??halTimerSetOpMode_5
        DW        ??halTimerSetOpMode_6
        DW        ??halTimerSetOpMode_7
        CODE
//  499       {
//  500         case HW_TIMER_1:
//  501           T1CTL &= ~(HAL_TIMER1_OPMODE_BITS);
??halTimerSetOpMode_5:
        ANL     0xe4,#0xfc
        MOV     A,0xe4
//  502           T1CTL |= HAL_TIMER1_OPMODE_FREERUN;
        ORL     0xe4,#0x1
//  503           break;
//  504         case HW_TIMER_3:
//  505           T3CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  506           T3CTL |= HAL_TIMER34_OPMODE_FREERUN;
//  507           break;
//  508         case HW_TIMER_4:
//  509           T4CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  510           T4CTL |= HAL_TIMER34_OPMODE_FREERUN;
//  511           break;
//  512         default:
//  513           return HAL_TIMER_INVALID_ID;
//  514       }
//  515       break;
//  516 
//  517     case HAL_TIMER_MODE_CTC:
//  518       switch (hwtimerid)
//  519       {
//  520         case HW_TIMER_1:
//  521           T1CTL &= ~(HAL_TIMER1_OPMODE_BITS);
//  522           T1CTL |= HAL_TIMER1_OPMODE_MODULO;
//  523           break;
//  524         case HW_TIMER_3:
//  525           T3CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  526           T3CTL |= HAL_TIMER34_OPMODE_MODULO;
//  527           break;
//  528         case HW_TIMER_4:
//  529           T4CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  530           T4CTL |= HAL_TIMER34_OPMODE_MODULO;
//  531           break;
//  532         default:
//  533           return HAL_TIMER_INVALID_ID;
//  534       }
//  535       break;
//  536 
//  537     case HAL_TIMER_MODE_STOP:
//  538       if (hwtimerid == HW_TIMER_1)
//  539       {
//  540         T1CTL &= ~(HAL_TIMER1_OPMODE_BITS);
//  541         T1CTL |= HAL_TIMER1_OPMODE_STOP;
//  542       }
//  543       break;
//  544 
//  545     default:
//  546       return HAL_TIMER_INVALID_OP_MODE;
//  547   }
//  548   return HAL_TIMER_OK;
??halTimerSetOpMode_8:
        MOV     R1,#0x0
??halTimerSetOpMode_9:
        LJMP    ?Subroutine11 & 0xFFFF
??halTimerSetOpMode_6:
        ANL     0xcb,#0xfc
        MOV     A,0xcb
        MOV     0xcb,0xcb
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_7:
        ANL     0xeb,#0xfc
        MOV     A,0xeb
        MOV     0xeb,0xeb
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_4:
        MOV     R1,#0x4
        SJMP    ??halTimerSetOpMode_9
??halTimerSetOpMode_2:
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetOpMode>_2`:
        DATA
        DB        0
        DB        2
        DW        ??halTimerSetOpMode_4
        DW        ??halTimerSetOpMode_10
        DW        ??halTimerSetOpMode_11
        DW        ??halTimerSetOpMode_12
        CODE
??halTimerSetOpMode_10:
        ANL     0xe4,#0xfc
        MOV     A,0xe4
        ORL     0xe4,#0x2
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_11:
        ANL     0xcb,#0xfc
        MOV     A,0xcb
        ORL     0xcb,#0x2
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_12:
        ANL     0xeb,#0xfc
        MOV     A,0xeb
        ORL     0xeb,#0x2
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_3:
        MOV     A,R1
        JNZ     ??halTimerSetOpMode_8
        ANL     0xe4,#0xfc
        MOV     A,0xe4
        MOV     0xe4,0xe4
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_0:
        MOV     R1,#0x6
        SJMP    ??halTimerSetOpMode_9
        CFI EndBlock cfiBlock23
        REQUIRE T3CTL
        REQUIRE T1CTL
        REQUIRE T4CTL
//  549 }
//  550 
//  551 /***************************************************************************************************
//  552  * @fn      halTimerSetChannelMode
//  553  *
//  554  * @brief   Setup channel modes.  Currently, only output compare mode is supported.  Input capture
//  555  *          mode is NOT supported.  Additionally, mapping timer channel inputs/outputs to I/O pins
//  556  *          is NOT supported.
//  557  *
//  558  * @param   hwtimerid - ID of the timer
//  559  *          channelMode - channel mode of the timer
//  560  *
//  561  * @return  Status - OK or Not OK
//  562  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  563 uint8 halTimerSetChannelMode (uint8 hwtimerid, uint8 channelMode)
halTimerSetChannelMode:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function halTimerSetChannelMode
//  564 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  565   switch (channelMode)
        MOV     A,R2
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetChannelMode>_0`:
        DATA
        DB        1
        DB        1
        DW        ??halTimerSetChannelMode_0
        DW        ??halTimerSetChannelMode_1
        DW        ??halTimerSetChannelMode_2
        CODE
//  566   {
//  567     case HAL_TIMER_CH_MODE_OUTPUT_COMPARE:
//  568       *(halTimerChannel[hwtimerid].TxCCTL) &= ~(T134CCTL_CMP_BITS);
??halTimerSetChannelMode_2:
        MOV     A,R1
        MOV     B,#0xa
        MUL     AB
        ADD     A,#(halTimerChannel & 0xff)
        MOV     R0,A
        MOV     A,B
        ADDC    A,#((halTimerChannel >> 8) & 0xff)
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        MOVX    A,@DPTR
        ANL     A,#0xc7
        MOVX    @DPTR,A
//  569       *(halTimerChannel[hwtimerid].TxCCTL) |= (T134CCTL_CMP_OC | T134CCTL_MODE);
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_30:
        ORL     A,#0x1c
        MOVX    @DPTR,A
//  570       break;
//  571 
//  572     case HAL_TIMER_CH_MODE_INPUT_CAPTURE:       /* Not Supported */
//  573 /*
//  574       *(halTimerChannel[hwtimerid].TxCCTL) &= ~(T134CCTL_CAP_BITS | T134CCTL_MODE);
//  575       *(halTimerChannel[hwtimerid].TxCCTL) |= T134CCTL_CAP_RE;
//  576 */
//  577       break;
//  578 
//  579     default:
//  580       return HAL_TIMER_INVALID_CH_MODE;
//  581   }
//  582   return HAL_TIMER_OK;
??halTimerSetChannelMode_1:
        MOV     R1,#0x0
??halTimerSetChannelMode_3:
        LJMP    ?Subroutine11 & 0xFFFF
??halTimerSetChannelMode_0:
        MOV     R1,#0x5
        SJMP    ??halTimerSetChannelMode_3
        CFI EndBlock cfiBlock24
//  583 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond26) CFA_SP SP+-5
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
//  584 
//  585 /***************************************************************************************************
//  586  * @fn      HalTimerInterruptEnable
//  587  *
//  588  * @brief   Setup operate modes
//  589  *
//  590  * @param   hwtimerid - ID of the timer
//  591  *          channelMode - channel mode
//  592  *          enable - TRUE or FALSE
//  593  *
//  594  * @return  Status - OK or Not OK
//  595  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  596 uint8 HalTimerInterruptEnable (uint8 hwtimerid, uint8 channelMode, bool enable)
HalTimerInterruptEnable:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function HalTimerInterruptEnable
//  597 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R7,A
        MOV     A,R3
        MOV     R6,A
//  598   switch (channelMode)
        MOV     A,R1
        MOV     B,#0xa
        MUL     AB
        MOV     R4,A
        MOV     R5,B
        ADD     A,#(halTimerChannel & 0xff)
        MOV     R2,A
        MOV     A,R5
        ADDC    A,#((halTimerChannel >> 8) & 0xff)
        MOV     R3,A
        MOV     A,R7
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for HalTimerInterruptEnable>_0`:
        DATA
        DB        1
        DB        1
        DB        2
        DW        ??HalTimerInterruptEnable_0
        DB        1
        DB        4
        DW        ??HalTimerInterruptEnable_1
        DW        ??HalTimerInterruptEnable_2
        CODE
//  599   {
//  600     case HAL_TIMER_CH_MODE_OVERFLOW:
//  601 
//  602       if (enable)
??HalTimerInterruptEnable_1:
        MOV     A,R2
        ADD     A,#0x8
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        JZ      ??HalTimerInterruptEnable_3
//  603       {
//  604         *(halTimerChannel[hwtimerid].TxOVF) |= halTimerChannel[hwtimerid].ovfbit;
        MOVX    A,@DPTR
        LCALL   ?Subroutine1 & 0xFFFF
//  605       }
??CrossCallReturnLabel_31:
        ORL     A,R6
??HalTimerInterruptEnable_4:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R4
        ADD     A,#((halTimerRecord + 1) & 0xff)
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#(((halTimerRecord + 1) >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??HalTimerInterruptEnable_5
//  606       else
//  607       {
//  608         *(halTimerChannel[hwtimerid].TxOVF) &= ((halTimerChannel[hwtimerid].ovfbit) ^ 0xFF);
//  609       }
//  610       break;
//  611 
//  612     case HAL_TIMER_CH_MODE_OUTPUT_COMPARE:
//  613     case HAL_TIMER_CH_MODE_INPUT_CAPTURE:
//  614 
//  615       if (enable)
//  616       {
//  617         *(halTimerChannel[hwtimerid].TxCCTL) |= T134CCTL_IM;
//  618       }
//  619       else
//  620       {
//  621         *(halTimerChannel[hwtimerid].TxCCTL) &= ~(T134CCTL_IM);
//  622       }
//  623       break;
//  624 
//  625     default:
//  626       return HAL_TIMER_INVALID_CH_MODE;
//  627   }
//  628 
//  629   if (halTimerRecord[hwtimerid].intEnable)
//  630   {
//  631     IEN1 |= halTimerChannel[hwtimerid].intbit;
        MOV     A,R2
        ORL     A,0xb8
        SJMP    ??HalTimerInterruptEnable_6
//  632   }
??HalTimerInterruptEnable_3:
        MOVX    A,@DPTR
        XRL     A,#0xff
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_32:
        ANL     A,R6
        SJMP    ??HalTimerInterruptEnable_4
??HalTimerInterruptEnable_0:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,R6
        JZ      ??HalTimerInterruptEnable_7
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        SJMP    ??HalTimerInterruptEnable_4
??HalTimerInterruptEnable_7:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.6
        SJMP    ??HalTimerInterruptEnable_4
??HalTimerInterruptEnable_2:
        MOV     R1,#0x5
        SJMP    ??HalTimerInterruptEnable_8
//  633   else
//  634   {
//  635     IEN1 &= ((halTimerChannel[hwtimerid].intbit) ^ 0xFF);
??HalTimerInterruptEnable_5:
        MOV     A,#-0x1
        XRL     A,R2
        ANL     A,0xb8
??HalTimerInterruptEnable_6:
        MOV     0xb8,A
//  636   }
//  637   return HAL_TIMER_OK;
        MOV     R1,#0x0
        CFI EndBlock cfiBlock28
??HalTimerInterruptEnable_8:
        REQUIRE ?Subroutine12
        REQUIRE _A_IEN1
        ; // Fall through to label ?Subroutine12
//  638 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        INC     DPTR
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_0
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_1
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     R6,A
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_34:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_31
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_32
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_30
        CFI (cfiCond47) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond47) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond47) CFA_SP SP+-5
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48
//  639 
//  640 /***************************************************************************************************
//  641  * @fn      halTimerSendCallBack
//  642  *
//  643  * @brief   Send Callback back to the caller
//  644  *
//  645  * @param   timerId - ID of the timer
//  646  *          channel - channel where the interrupt occurs
//  647  *          channelMode - channel mode
//  648  *
//  649  *
//  650  * @return  None
//  651  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  652 void halTimerSendCallBack (uint8 timerId, uint8 channel, uint8 channelMode)
halTimerSendCallBack:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI Function halTimerSendCallBack
//  653 {
        FUNCALL halTimerSendCallBack, halTimerRemap
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        MOV     ?V0 + 0,R3
//  654   uint8 hwtimerid;
//  655 
//  656   hwtimerid = halTimerRemap (timerId);
        ; Setup parameters for call to function halTimerRemap
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        ADD     A,#((halTimerRecord + 8) & 0xff)
        MOV     DPL,A
        MOV     A,B
        ADDC    A,#(((halTimerRecord + 8) >> 8) & 0xff)
        MOV     DPH,A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,DPL
        JNZ     ??halTimerSendCallBack_0
        MOV     A,DPH
??halTimerSendCallBack_0:
        JZ      ??halTimerSendCallBack_1
//  657 
//  658   if (halTimerRecord[hwtimerid].callBackFunc)
//  659     (halTimerRecord[hwtimerid].callBackFunc) (timerId, channel, channelMode);
        ; Setup parameters for indirect call
        MOV     R3,?V0 + 0
        MOV     A,R7
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ?CALL_IND
//  660 }
??halTimerSendCallBack_1:
        SJMP    ?Subroutine12
        CFI EndBlock cfiBlock49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
//  661 
//  662 /***************************************************************************************************
//  663  * @fn      halTimerRemap
//  664  *
//  665  * @brief   Maps API HAL_TIMER_ID to HW Timer ID.
//  666  *          HAL_TIMER_0 --> HW Timer 3 8bit
//  667  *          HAL_TIMER_2 --> HW Timer 4 8bit
//  668  *          HAL_TIMER_3 --> HW Timer 1 16bit
//  669  *
//  670  * @param   timerId - ID of the timer
//  671  *
//  672  * @return  HW timer ID
//  673  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  674 uint8 halTimerRemap (uint8 timerId)
halTimerRemap:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function halTimerRemap
//  675 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  676   switch (timerId)
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerRemap>_0`:
        DATA
        DB        0
        DB        3
        DW        ??halTimerRemap_0
        DW        ??halTimerRemap_1
        DW        ??halTimerRemap_0
        DW        ??halTimerRemap_2
        DW        ??halTimerRemap_3
        CODE
//  677   {
//  678     case HAL_TIMER_0:
//  679       return HW_TIMER_3;
??halTimerRemap_1:
        MOV     R1,#0x1
        SJMP    ??halTimerRemap_4
//  680     case HAL_TIMER_2:
//  681       return HW_TIMER_4;
??halTimerRemap_2:
        MOV     R1,#0x2
        SJMP    ??halTimerRemap_4
//  682     case HAL_TIMER_3:
//  683       return HW_TIMER_1;
??halTimerRemap_3:
        MOV     R1,#0x0
        SJMP    ??halTimerRemap_4
//  684     default:
//  685       return HW_TIMER_INVALID;
??halTimerRemap_0:
        MOV     R1,#0x3
//  686   }
??halTimerRemap_4:
        SJMP    ?Subroutine11
        CFI EndBlock cfiBlock53
//  687 }
//  688 
//  689 /***************************************************************************************************
//  690  * @fn      halProcessTimer1
//  691  *
//  692  * @brief   Processes Timer 1 Events.
//  693  *
//  694  * @param
//  695  *
//  696  * @return
//  697  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  698 void halProcessTimer1 (void)
halProcessTimer1:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function halProcessTimer1
//  699 {
        FUNCALL halProcessTimer1, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  700   if (halTimerRecord[halTimerRemap(HAL_TIMER_3)].channelMode == HAL_TIMER_CH_MODE_OUTPUT_COMPARE)
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x3
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        JNZ     ??halProcessTimer1_0
//  701   {
//  702     if (T1CTL & T1CTL_CH0IF)
        MOV     A,0xe4
        MOV     C,0xE0 /* A   */.5
        JNC     ??halProcessTimer1_1
//  703     {
//  704       T1CTL &= ~(T1CTL_CH0IF);
        ANL     0xe4,#0xdf
//  705       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_A, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x2
        MOV     R1,#0x3
        LCALL   ??halTimerSendCallBack?relay
//  706     }
//  707     if (T1CTL & T1CTL_CH1IF)
??halProcessTimer1_1:
        MOV     A,0xe4
        MOV     C,0xE0 /* A   */.6
        JNC     ??halProcessTimer1_2
//  708     {
//  709       T1CTL &= ~(T1CTL_CH1IF);
        ANL     0xe4,#0xbf
//  710       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_B, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x4
        MOV     R1,#0x3
        LCALL   ??halTimerSendCallBack?relay
//  711     }
//  712     if (T1CTL & T1CTL_CH2IF)
??halProcessTimer1_2:
        MOV     A,0xe4
        MOV     C,0xE0 /* A   */.7
        JNC     ??halProcessTimer1_3
//  713     {
//  714       T1CTL &= ~(T1CTL_CH2IF);
        ANL     0xe4,#0x7f
//  715       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_C, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x8
        SJMP    ??halProcessTimer1_4
//  716     }
//  717   }
//  718   else if (halTimerRecord[halTimerRemap(HAL_TIMER_3)].channelMode == HAL_TIMER_CH_MODE_OVERFLOW)
??halProcessTimer1_0:
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x3
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        JNZ     ??halProcessTimer1_3
//  719   {
//  720     if (T1CTL & T1CTL_OVFIF)
        MOV     A,0xe4
        MOV     C,0xE0 /* A   */.4
        JNC     ??halProcessTimer1_3
//  721     {
//  722       T1CTL &= ~(T1CTL_OVFIF);
        ANL     0xe4,#0xef
//  723       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_SINGLE, HAL_TIMER_CH_MODE_OVERFLOW);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x4
        MOV     R2,#0x1
??halProcessTimer1_4:
        MOV     R1,#0x3
        LCALL   ??halTimerSendCallBack?relay
        CFI EndBlock cfiBlock54
//  724     }
//  725   }
//  726 }
??halProcessTimer1_3:
        REQUIRE ?Subroutine11
        REQUIRE T1CTL
        ; // Fall through to label ?Subroutine11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock55
//  727 
//  728 /***************************************************************************************************
//  729  * @fn      halProcessTimer3
//  730  *
//  731  * @brief   Processes Timer 3 Events.
//  732  *
//  733  * @param
//  734  *
//  735  * @return
//  736  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  737 void halProcessTimer3 (void)
halProcessTimer3:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function halProcessTimer3
//  738 {
        FUNCALL halProcessTimer3, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer3, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer3, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer3, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer3, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  739   if (halTimerRecord[halTimerRemap(HAL_TIMER_0)].channelMode == HAL_TIMER_CH_MODE_OUTPUT_COMPARE)
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        JNZ     ??halProcessTimer3_0
//  740   {
//  741     if (TIMIF & TIMIF_T3CH0IF)
        MOV     C,0xd8.1
        JNC     ??halProcessTimer3_1
//  742     {
//  743       TIMIF &= ~(TIMIF_T3CH0IF);
        CLR     0xd8.1
//  744       halTimerSendCallBack (HAL_TIMER_0, HAL_TIMER_CHANNEL_A, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x2
        MOV     R1,#0x0
        LCALL   ??halTimerSendCallBack?relay
//  745     }
//  746     if (TIMIF & TIMIF_T3CH1IF)
??halProcessTimer3_1:
        MOV     C,0xd8.2
        JNC     ??halProcessTimer3_2
//  747     {
//  748       TIMIF &= ~(TIMIF_T3CH1IF);
        CLR     0xd8.2
//  749       halTimerSendCallBack (HAL_TIMER_0, HAL_TIMER_CHANNEL_B, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x4
        SJMP    ??halProcessTimer3_3
//  750     }
//  751   }
//  752   else if (halTimerRecord[halTimerRemap(HAL_TIMER_0)].channelMode == HAL_TIMER_CH_MODE_OVERFLOW)
??halProcessTimer3_0:
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x0
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        JNZ     ??halProcessTimer3_2
//  753   {
//  754     if (TIMIF & TIMIF_T3OVFIF)
        MOV     C,0xd8.0
        JNC     ??halProcessTimer3_2
//  755     {
//  756       TIMIF &= ~(TIMIF_T3OVFIF);
        CLR     0xd8.0
//  757       halTimerSendCallBack (HAL_TIMER_0, HAL_TIMER_CHANNEL_SINGLE, HAL_TIMER_CH_MODE_OVERFLOW);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x4
        MOV     R2,#0x1
??halProcessTimer3_3:
        MOV     R1,#0x0
        LCALL   ??halTimerSendCallBack?relay
//  758     }
//  759   }
//  760 }
??halProcessTimer3_2:
        SJMP    ?Subroutine11
        CFI EndBlock cfiBlock56
        REQUIRE _A_TIMIF

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond58) CFA_SP SP+-5
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond59) CFA_SP SP+-5
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        XRL     A,#0x4
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond62) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond62) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond62) CFA_SP SP+-5
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond63) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond63) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond63) CFA_SP SP+-5
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_13:
        XRL     A,#0x2
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_9
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_10
        CFI (cfiCond66) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond66) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond66) CFA_SP SP+-5
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_11
        CFI (cfiCond67) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond67) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond67) CFA_SP SP+-5
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_6
        CFI (cfiCond68) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond68) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond68) CFA_SP SP+-5
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_7
        CFI (cfiCond69) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond69) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond69) CFA_SP SP+-5
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_8
        CFI (cfiCond70) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond70) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond70) CFA_SP SP+-5
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        ADD     A,#((halTimerRecord + 4) & 0xff)
        MOV     DPL,A
        MOV     A,B
        ADDC    A,#(((halTimerRecord + 4) >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_9
        CFI (cfiCond73) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond73) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond73) CFA_SP SP+-5
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_10
        CFI (cfiCond74) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond74) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond74) CFA_SP SP+-5
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_11
        CFI (cfiCond75) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond75) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond75) CFA_SP SP+-5
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_6
        CFI (cfiCond76) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond76) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond76) CFA_SP SP+-5
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_7
        CFI (cfiCond77) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond77) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond77) CFA_SP SP+-5
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_8
        CFI (cfiCond78) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond78) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond78) CFA_SP SP+-5
        CFI Block cfiPicker79 Using cfiCommon1
        CFI (cfiPicker79) NoFunction
        CFI (cfiPicker79) Picker
        LCALL   ??halTimerRemap?relay
        MOV     A,R1
        MOV     B,#0xa
        MUL     AB
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiPicker79
//  761 
//  762 /***************************************************************************************************
//  763  * @fn      halProcessTimer4
//  764  *
//  765  * @brief   Processes Timer 4 Events.
//  766  *
//  767  * @param
//  768  *
//  769  * @return
//  770  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  771 void halProcessTimer4 (void)
halProcessTimer4:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI Function halProcessTimer4
//  772 {
        FUNCALL halProcessTimer4, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer4, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer4, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer4, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer4, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  773   if (halTimerRecord[halTimerRemap(HAL_TIMER_2)].channelMode == HAL_TIMER_CH_MODE_OUTPUT_COMPARE)
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x2
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        JNZ     ??halProcessTimer4_0
//  774   {
//  775     if (TIMIF & TIMIF_T4CH0IF)
        MOV     C,0xd8.4
        JNC     ??halProcessTimer4_1
//  776     {
//  777       TIMIF &= ~(TIMIF_T4CH0IF);
        CLR     0xd8.4
//  778       halTimerSendCallBack (HAL_TIMER_2, HAL_TIMER_CHANNEL_A, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x2
        MOV     R1,#0x2
        LCALL   ??halTimerSendCallBack?relay
//  779     }
//  780     if (TIMIF & TIMIF_T4CH1IF)
??halProcessTimer4_1:
        MOV     C,0xd8.5
        JNC     ??halProcessTimer4_2
//  781     {
//  782       TIMIF &= ~(TIMIF_T4CH1IF);
        CLR     0xd8.5
//  783       halTimerSendCallBack (HAL_TIMER_2, HAL_TIMER_CHANNEL_B, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x4
        SJMP    ??halProcessTimer4_3
//  784     }
//  785   }
//  786   else if (halTimerRecord[halTimerRemap(HAL_TIMER_2)].channelMode == HAL_TIMER_CH_MODE_OVERFLOW)
??halProcessTimer4_0:
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x2
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        JNZ     ??halProcessTimer4_2
//  787   if (TIMIF & TIMIF_T4OVFIF)
        MOV     C,0xd8.3
        JNC     ??halProcessTimer4_2
//  788   {
//  789     TIMIF &= ~(TIMIF_T4OVFIF);
        CLR     0xd8.3
//  790     halTimerSendCallBack (HAL_TIMER_2, HAL_TIMER_CHANNEL_SINGLE, HAL_TIMER_CH_MODE_OVERFLOW);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x4
        MOV     R2,#0x1
??halProcessTimer4_3:
        MOV     R1,#0x2
        LCALL   ??halTimerSendCallBack?relay
//  791   }
//  792 }
??halProcessTimer4_2:
        LJMP    ?Subroutine11 & 0xFFFF
        CFI EndBlock cfiBlock80
        REQUIRE _A_TIMIF
//  793 
//  794 /***************************************************************************************************
//  795  *                                    INTERRUPT SERVICE ROUTINE
//  796  ***************************************************************************************************/
//  797 
//  798 /**************************************************************************************************
//  799  * @fn      halTimer1Isr
//  800  *
//  801  * @brief   Timer 1 ISR
//  802  *
//  803  * @param
//  804  *
//  805  * @return
//  806  **************************************************************************************************/
//  807 //extern unsigned char T1_FLAG1;
//  808 extern unsigned short IR_Encoding[];
//  809 extern int T1_CNT1;
//  810 extern int IR_CNT;
//  811 //int T1_CH0_OVF=0;

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  812 HAL_ISR_FUNCTION( halTimer1Isr, T1_VECTOR )
halTimer1Isr:
        CFI Block cfiBlock81 Using cfiCommon1
        CFI Function halTimer1Isr
//  813 {
        FUNCALL halTimer1Isr, Hal_IR_RCVD_Int_Config
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halTimer1Isr, initUARTtest
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halTimer1Isr, UartTX_Send_String
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  814     //halProcessTimer1 ();
//  815     if((T1STAT & 0x02) && (T1STAT & 0x01))
        MOV     A,0xaf
        MOV     C,0xE0 /* A   */.1
        JNC     ??halTimer1Isr_0
        MOV     A,0xaf
        MOV     C,0xE0 /* A   */.0
        JC      ??halTimer1Isr_1
//  816     {
//  817         //T1STAT = 0x00;
//  818 
//  819         //T1CC1L = IR_Encoding[ (T1_CNT1++)%IR_CNT ];
//  820         //T1CC0L = 47;
//  821 
//  822         //T1CC1H = 0;
//  823         //T1CC0H = 0;
//  824     }
//  825     //else if( T1STAT & 0x04 )  //T1.CH2 INT FLAG
//  826     //{
//  827     //    P1DIR |= 0x03; 
//  828     //    P1_1=0;
//  829     //    P1_0=0;
//  830 
//  831     //    T1CNTL = 0x00;        //Clear T1.CNT
//  832     //    T1STAT = 0x00;        //Clear T1 INT Flag
//  833     //    IR_Encoding[T1_CNT1] = T1CC2L;
//  834     //    IR_Encoding[T1_CNT1++] += T1CC2H*0x100;
//  835     //}
//  836     else if ( T1STAT & 0x01 ) //T1.CH0 INT,21ms
??halTimer1Isr_0:
        MOV     A,0xaf
        MOV     C,0xE0 /* A   */.0
        JNC     ??halTimer1Isr_1
//  837     {
//  838         T1CNTL = 0x00;        //Clear T1.CNT
        MOV     0xe2,#0x0
//  839         T1STAT = 0x00;        //Clear T1 INT Flag
        MOV     0xaf,#0x0
//  840         //T1CTL &= ~0x03;       //Shutdown T1
//  841         //if( (T1_CH0_OVF == 0) && (T1_CNT1 != 0 ) )
//  842         //{
//  843         //    IR_Encoding[T1_CNT1] = 0xFFFF;
//  844         //    T1_CH0_OVF++;
//  845         //}
//  846         //else if( (T1_CNT1 != 0) && (T1_CH0_OVF ==1) )
//  847         {
//  848             Hal_IR_RCVD_Int_Config( HAL_IR_INTERRUPT_ENABLE );
        ; Setup parameters for call to function Hal_IR_RCVD_Int_Config
        MOV     R1,#0x1
        LCALL   ??Hal_IR_RCVD_Int_Config?relay
//  849 
//  850             initUARTtest();
        ; Setup parameters for call to function initUARTtest
        LCALL   ??initUARTtest?relay
//  851             IR_Encoding[0]=0x0123;
        MOV     DPTR,#IR_Encoding
        MOV     A,#0x23
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
//  852             UartTX_Send_String(IR_Encoding,T1_CNT1);
        ; Setup parameters for call to function UartTX_Send_String
        MOV     DPTR,#T1_CNT1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#(IR_Encoding & 0xff)
        MOV     R3,#((IR_Encoding >> 8) & 0xff)
        LCALL   ??UartTX_Send_String?relay
//  853             T1_CNT1 = 0;
        MOV     DPTR,#T1_CNT1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  854             //T1_CH0_OVF=0;
//  855             
//  856             P1DIR |= 0x03; 
        ORL     0xfe,#0x3
        MOV     A,0xfe
//  857             P1_0=0;
        CLR     0x90.0
//  858             P1_1=0;
        CLR     0x90.1
        CFI EndBlock cfiBlock81
//  859         }
//  860     }
//  861 }
??halTimer1Isr_1:
        REQUIRE ?Subroutine13
        REQUIRE _A_P1
        REQUIRE T1STAT
        REQUIRE T1CNTL
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine13

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiBlock82 Using cfiCommon1
        CFI NoFunction
        CFI CFA_SP SP+-3
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI A Frame(CFA_SP, 3)
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock82
//  862 
//  863 /**************************************************************************************************
//  864  * @fn      halTimer3Isr
//  865  *
//  866  * @brief   Timer 3 ISR
//  867  *
//  868  * @param
//  869  *
//  870  * @return
//  871  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  872 HAL_ISR_FUNCTION( halTimer3Isr, T3_VECTOR )
halTimer3Isr:
        CFI Block cfiBlock83 Using cfiCommon1
        CFI Function halTimer3Isr
//  873 {
        FUNCALL halTimer3Isr, halProcessTimer3
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  874   halProcessTimer3 ();
        ; Setup parameters for call to function halProcessTimer3
        LCALL   ??halProcessTimer3?relay
//  875 }
        SJMP    ?Subroutine13
        CFI EndBlock cfiBlock83
//  876 
//  877 /**************************************************************************************************
//  878  * @fn      halTimer4Isr
//  879  *
//  880  * @brief   Timer 4 ISR
//  881  *
//  882  * @param
//  883  *
//  884  * @return
//  885  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  886 HAL_ISR_FUNCTION( halTimer4Isr, T4_VECTOR )
halTimer4Isr:
        CFI Block cfiBlock84 Using cfiCommon1
        CFI Function halTimer4Isr
//  887 {
        FUNCALL halTimer4Isr, halProcessTimer4
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  888   halProcessTimer4 ();
        ; Setup parameters for call to function halProcessTimer4
        LCALL   ??halProcessTimer4?relay
//  889 }
        SJMP    ?Subroutine13
        CFI EndBlock cfiBlock84

        COMMON INTVEC:CODE:ROOT(0)
        ORG 75
`??halTimer1Isr??INTVEC 75`:
        LJMP       (halTimer1Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 91
`??halTimer3Isr??INTVEC 91`:
        LJMP       (halTimer3Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 99
`??halTimer4Isr??INTVEC 99`:
        LJMP       (halTimer4Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerTick?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerTick

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerStop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerStop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSetCount?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSetCount

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSetPrescale?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSetPrescale

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSetOpMode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSetOpMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSetChannelMode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSetChannelMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerInterruptEnable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerInterruptEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSendCallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSendCallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerRemap?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerRemap

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halProcessTimer1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halProcessTimer1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halProcessTimer3?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halProcessTimer3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halProcessTimer4?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halProcessTimer4

        END
//  890 
//  891 /***************************************************************************************************
//  892 ***************************************************************************************************/
//  893 
// 
// 1 486 bytes in segment BANKED_CODE
//    90 bytes in segment BANK_RELAYS
//     9 bytes in segment INTVEC
//   109 bytes in segment NEAR_CODE
//    16 bytes in segment SFR_AN
//    60 bytes in segment XDATA_Z
// 
// 1 685 bytes of CODE  memory (+  9 bytes shared)
//     0 bytes of DATA  memory (+ 16 bytes shared)
//    60 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
