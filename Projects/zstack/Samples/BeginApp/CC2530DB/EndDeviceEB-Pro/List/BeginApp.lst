###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                29/Nov/2013  11:05:06 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\Source\BeginApp.c             #
#    Command line       =  -f E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C #
#                          51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEX #
#                          AS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\Samples\BeginApp\CC2530DB\..\..\..\Tools\CC #
#                          2530DB\f8wEndev.cfg (-DCPU32MHZ                    #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wConfig.cfg (-DSECURE=0                      #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x04000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\Source\BeginApp.c -D          #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK  #
#                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                   #
#                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D            #
#                          HAL_LCD=FALSE -D HAL_KEY=FALSE -D HAL_ADC=FALSE    #
#                          -D HAL_UART=FALSE -D HAL_SPI=FALSE -lC             #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\List #
#                          \ -lA E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.1 #
#                          0\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\ #
#                          TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projec #
#                          ts\zstack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pr #
#                          o\List\ --diag_suppress Pe001,Pa010 -o             #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\Obj\ #
#                           -e --require_prototypes --debug --core=plain      #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I E:\C51RF-CC2530-PKÎÞÏßZIGBE #
#                          EÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007 #
#                          _PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530 #
#                          DB\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1. #
#                          10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò #
#                          \TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Proje #
#                          cts\zstack\Samples\BeginApp\CC2530DB\..\SOURCE\    #
#                          -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C #
#                          51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEX #
#                          AS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\Samples\BeginApp\CC2530DB\..\..\..\ZMAIN\TI #
#                          2530DB\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì #
#                          ¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ #
#                          ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\P #
#                          rojects\zstack\Samples\BeginApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MT\ -I E:\C51RF-CC2530-PKÎÞÏßZIGB #
#                          EEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE200 #
#                          7_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530- #
#                          2.2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I      #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\HAL\TARGET\CC2530EB\ -I                      #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\OSAL\MCU\CCSOC\ -I                           #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\OSAL\INCLUDE\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBE #
#                          EÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007 #
#                          _PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I          #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\NWK\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍø #
#                          Âç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PR #
#                          OÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2. #
#                          0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\STACK\SEC\ -I            #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\SAPI\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍ #
#                          øÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_P #
#                          ROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2 #
#                          .0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\SYS\ -I           #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\ZDO\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍø #
#                          Âç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PR #
#                          OÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2. #
#                          0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I             #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\ZMAC\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª· #
#                          ¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾ #
#                          ²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3 #
#                          .0\Projects\zstack\Samples\BeginApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\SERVICES\SDATA\ -I                           #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\MAC\INCLUDE\ -I E:\C51RF-CC2530-PKÎÞÏßZIGBEE #
#                          ÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_ #
#                          PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2. #
#                          2.0-1.3.0\Projects\zstack\Samples\BeginApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I     #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\MAC\LOW_LEVEL\srf04\ -I                      #
#                          E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I          #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\List #
#                          \BeginApp.lst                                      #
#    Object file        =  E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51R #
#                          F-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS- #
#                          INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\BeginApp\CC2530DB\EndDeviceEB-Pro\Obj\ #
#                          BeginApp.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\BeginApp\Source\BeginApp.c
      1          /**************************************************************************************************
      2            Filename:       BeginApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Begin Application (no Profile).
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Begin"
     45            application every 15 seconds.  The application will also
     46            receive "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "BeginApp.h"
     70          #include "DebugTrace.h"
     71          
     72          #if !defined( WIN32 )
     73            #include "OnBoard.h"
     74          #endif
     75          
     76          /* HAL */
     77          #include "hal_lcd.h"
     78          #include "hal_led.h"
     79          #include "hal_IR.h"

  #ifndef HAL_IR_H
                 ^
"E:\C51RF-CC2530-PKÎÞÏßZIGBEEÍøÂç¿ª·¢Æ½Ì¨V1.10\C51RF-CC2530ÑÝÊ¾³ÌÐò\ZIGBEE2007_PROÑÝÊ¾²âÊÔ³ÌÐò\TEXAS-INSTRUMENTS\ZSTACK-CC2530-2.2.0-1.3.0\COMPONENTS\HAL\INCLUDE\hal_IR.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     80          #include "hal_key.h"
     81          //#include "hal_uart.h"
     82          
     83          /*********************************************************************
     84           * MACROS
     85           */
     86          
     87          /*********************************************************************
     88           * CONSTANTS
     89           */
     90          
     91          /*********************************************************************
     92           * TYPEDEFS
     93           */
     94          
     95          /*********************************************************************
     96           * GLOBAL VARIABLES
     97           */
     98          
     99          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    100          const cId_t BeginApp_ClusterList[BEGINAPP_MAX_CLUSTERS] =
   \                     BeginApp_ClusterList:
   \   000000   0100         DW 1
    101          {
    102            BEGINAPP_CLUSTERID
    103          };
    104          

   \                                 In  segment XDATA_ROM_C, align 1
    105          const SimpleDescriptionFormat_t BeginApp_SimpleDesc =
   \                     BeginApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F0100     DW 3844, 1
   \   000005   0001         DB 0, 1
   \   000007   ....         DW BeginApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW BeginApp_ClusterList
    106          {
    107            BEGINAPP_ENDPOINT,              //  int Endpoint;
    108            BEGINAPP_PROFID,                //  uint16 AppProfId[2];
    109            BEGINAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    110            BEGINAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    111            BEGINAPP_FLAGS,                 //  int   AppFlags:4;
    112            BEGINAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    113            (cId_t *)BeginApp_ClusterList,  //  byte *pAppInClusterList;
    114            BEGINAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    115            (cId_t *)BeginApp_ClusterList   //  byte *pAppInClusterList;
    116          };
    117          
    118          // This is the Endpoint/Interface description.  It is defined here, but
    119          // filled-in in BeginApp_Init().  Another way to go would be to fill
    120          // in the structure here and make it a "const" (in code space).  The
    121          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          endPointDesc_t BeginApp_epDesc;
   \                     BeginApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    123          
    124          /*********************************************************************
    125           * EXTERNAL VARIABLES
    126           */
    127          
    128          /*********************************************************************
    129           * EXTERNAL FUNCTIONS
    130           */
    131          
    132          /*********************************************************************
    133           * LOCAL VARIABLES
    134           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          byte BeginApp_TaskID;   // Task ID for internal task/event processing
   \                     BeginApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136                                    // This variable will be received when
    137                                    // BeginApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          devStates_t BeginApp_NwkState;
   \                     BeginApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          byte BeginApp_TransID;  // This is the unique message ID (counter)
   \                     BeginApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t BeginApp_DstAddr;
   \                     BeginApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          void BeginApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    149          void BeginApp_HandleKeys( byte shift, byte keys );
    150          void BeginApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    151          void BeginApp_SendTheMessage( void );
    152          
    153          /*********************************************************************
    154           * NETWORK LAYER CALLBACKS
    155           */
    156          
    157          /*********************************************************************
    158           * PUBLIC FUNCTIONS
    159           */
    160          
    161          /*********************************************************************
    162           * @fn      BeginApp_Init
    163           *
    164           * @brief   Initialization function for the Begin App Task.
    165           *          This is called during initialization and should contain
    166           *          any application specific initialization (ie. hardware
    167           *          initialization/setup, table initialization, power up
    168           *          notificaiton ... ).
    169           *
    170           * @param   task_id - the ID assigned by OSAL.  This ID should be
    171           *                    used to send messages and set timers.
    172           *
    173           * @return  none
    174           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    175          uint8 T1_FLAG1 = 0x01;
   \                     T1_FLAG1:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for T1_FLAG1>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          int T1_CNT1 = 0;
   \                     T1_CNT1:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint16 IR_Encoding[100];
   \                     IR_Encoding:
   \   000000                DS 200
   \   0000C8                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    178          int IR_CNT = sizeof(IR_Encoding) / sizeof(IR_Encoding[0]);
   \                     IR_CNT:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for IR_CNT>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          void BeginApp_Init( byte task_id )
   \                     BeginApp_Init:
    180          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    181            BeginApp_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#BeginApp_TaskID
   \   000008   F0           MOVX    @DPTR,A
    182            BeginApp_NwkState = DEV_INIT;
   \   000009   7401         MOV     A,#0x1
   \   00000B   90....       MOV     DPTR,#BeginApp_NwkState
   \   00000E   F0           MOVX    @DPTR,A
    183            BeginApp_TransID = 0;
   \   00000F   E4           CLR     A
   \   000010   90....       MOV     DPTR,#BeginApp_TransID
   \   000013   F0           MOVX    @DPTR,A
    184          
    185            // Device hardware initialization can be added here or in main() (Zmain.c).
    186            // If the hardware is application specific - add it here.
    187            // If the hardware is other parts of the device add it in main().
    188          
    189            BeginApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000014   90....       MOV     DPTR,#(BeginApp_DstAddr + 8)
   \   000017   F0           MOVX    @DPTR,A
    190            BeginApp_DstAddr.endPoint = 0;
   \   000018   90....       MOV     DPTR,#(BeginApp_DstAddr + 9)
   \   00001B   F0           MOVX    @DPTR,A
    191            BeginApp_DstAddr.addr.shortAddr = 0;
   \   00001C   90....       MOV     DPTR,#BeginApp_DstAddr
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
    192          
    193            // Fill out the endpoint description.
    194            BeginApp_epDesc.endPoint = BEGINAPP_ENDPOINT;
   \   000022   740A         MOV     A,#0xa
   \   000024   90....       MOV     DPTR,#BeginApp_epDesc
   \   000027   F0           MOVX    @DPTR,A
    195            BeginApp_epDesc.task_id = &BeginApp_TaskID;
   \   000028   90....       MOV     DPTR,#(BeginApp_epDesc + 1)
   \   00002B   74..         MOV     A,#(BeginApp_TaskID & 0xff)
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   74..         MOV     A,#((BeginApp_TaskID >> 8) & 0xff)
   \   000031   F0           MOVX    @DPTR,A
    196            BeginApp_epDesc.simpleDesc
    197                      = (SimpleDescriptionFormat_t *)&BeginApp_SimpleDesc;
   \   000032   90....       MOV     DPTR,#(BeginApp_epDesc + 3)
   \   000035   74..         MOV     A,#(BeginApp_SimpleDesc & 0xff)
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#((BeginApp_SimpleDesc >> 8) & 0xff)
   \   00003B   F0           MOVX    @DPTR,A
    198            BeginApp_epDesc.latencyReq = noLatencyReqs;
   \   00003C   E4           CLR     A
   \   00003D   90....       MOV     DPTR,#(BeginApp_epDesc + 5)
   \   000040   F0           MOVX    @DPTR,A
    199          
    200            // Register the endpoint description with the AF
    201            afRegister( &BeginApp_epDesc );
   \   000041                ; Setup parameters for call to function afRegister
   \   000041   7A..         MOV     R2,#(BeginApp_epDesc & 0xff)
   \   000043   7B..         MOV     R3,#((BeginApp_epDesc >> 8) & 0xff)
   \   000045   12....       LCALL   ??afRegister?relay
    202          
    203            // Register for all key events - This app will handle all key events
    204            RegisterForKeys( BeginApp_TaskID );
   \   000048                ; Setup parameters for call to function RegisterForKeys
   \   000048   90....       MOV     DPTR,#BeginApp_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   ??RegisterForKeys?relay
    205          
    206            // Update the display
    207          #if defined ( LCD_SUPPORTED )
    208              HalLcdWriteString( "BeginApp", HAL_LCD_LINE_1 );
   \   000050                ; Setup parameters for call to function HalLcdWriteString
   \   000050   7901         MOV     R1,#0x1
   \   000052   7A..         MOV     R2,#(`?<Constant "BeginApp">` & 0xff)
   \   000054   7B..         MOV     R3,#((`?<Constant "BeginApp">` >> 8) & 0xff)
   \   000056   12....       LCALL   ??HalLcdWriteString?relay
    209          #endif
    210              
    211            ZDO_RegisterForZDOMsg( BeginApp_TaskID, End_Device_Bind_rsp );
   \   000059                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000059   7A20         MOV     R2,#0x20
   \   00005B   7B80         MOV     R3,#-0x80
   \   00005D   90....       MOV     DPTR,#BeginApp_TaskID
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    212            ZDO_RegisterForZDOMsg( BeginApp_TaskID, Match_Desc_rsp );
   \   000065                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000065   7A06         MOV     R2,#0x6
   \   000067   7B80         MOV     R3,#-0x80
   \   000069   90....       MOV     DPTR,#BeginApp_TaskID
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    213            
    214              //PERCFG &= ~0x20;
    215              //P1SEL |= 0x10;
    216              //P2DIR = (P2DIR & ~0xc0) | 0x80; 
    217          
    218              //T3CCTL1 = 0x34;
    219              //T3CC1 = 70;
    220              //T3CC0 = 210;
    221              //T3CTL = (T3CTL & ~0xE0) | 0x40; //divide with 4
    222              //T3CTL = (T3CTL | 0x02) & ~0x01; //set mode modulo
    223          
    224              //T3CTL |= 0x10; //start T3
    225          
    226              ////T1 interrupt
    227              //TIMIF |= 0x40;
    228              //IRCON &= ~0x02;
    229              //EA = 1;
    230              //T1IE = 1;
    231              //
    232              //IRCTL |= 0x01;
    233          
    234              ////Timer1
    235              //PERCFG &= ~0x40;
    236              //P0SEL |= 0x08;
    237          
    238              //T1CCTL1 = 0x64;
    239          
    240              //T1CC1L = IR_Encoding[0];
    241              //T1CC0L = 47;
    242          
    243              //T1CC1H = 0;
    244              //T1CC0H = 0;
    245          
    246              //T1CCTL0 |= 0x44;
    247          
    248              //T1CTL = 0x02;
    249          }
   \   000071                REQUIRE ?Subroutine0
   \   000071                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    250          
    251          
    252          /*********************************************************************
    253           * @fn      BeginApp_ProcessEvent
    254           *
    255           * @brief   Begin Application Task event processor.  This function
    256           *          is called to process all events for the task.  Events
    257           *          include timers, messages and any other user defined events.
    258           *
    259           * @param   task_id  - The OSAL assigned task ID.
    260           * @param   events - events to process.  This is a bit map and can
    261           *                   contain more than one event.
    262           *
    263           * @return  none
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          UINT16 BeginApp_ProcessEvent( byte task_id, UINT16 events )
   \                     BeginApp_ProcessEvent:
    266          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    267            afIncomingMSGPacket_t *MSGpkt;
    268            afDataConfirm_t *afDataConfirm;
    269          
    270            // Data Confirmation message fields
    271            byte sentEP;
    272            ZStatus_t sentStatus;
    273            byte sentTransID;       // This should match the value sent
    274            (void)task_id;  // Intentionally unreferenced parameter
    275          
    276            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??BeginApp_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??BeginApp_ProcessEvent_0:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??BeginApp_ProcessEvent_1 & 0xFFFF
    277            {
    278              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( BeginApp_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   8038         SJMP    ??BeginApp_ProcessEvent_2
    279              while ( MSGpkt )
    280              {
    281                switch ( MSGpkt->hdr.event )
    282                {
    283                  case ZDO_CB_MSG:
    284                    BeginApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    285                    break;
    286                    
    287                  case KEY_CHANGE:
    288                    BeginApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    289                    break;
    290          
    291                  case AF_DATA_CONFIRM_CMD:
    292                    // This message is received as a confirmation of a data packet sent.
    293                    // The status is of ZStatus_t type [defined in ZComDef.h]
    294                    // The message fields are defined in AF.h
    295                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    296                    sentEP = afDataConfirm->endpoint;
    297                    sentStatus = afDataConfirm->hdr.status;
    298                    sentTransID = afDataConfirm->transID;
    299                    (void)sentEP;
    300                    (void)sentTransID;
    301          
    302                    // Action taken when confirmation is received.
    303                    if ( sentStatus != ZSuccess )
    304                    {
    305                      // The data wasn't delivered -- Do something
    306                    }
    307                    break;
    308          
    309                  case AF_INCOMING_MSG_CMD:
    310                    BeginApp_MessageMSGCB( MSGpkt );
    311                    break;
    312          
    313                  case ZDO_STATE_CHANGE:
    314                    BeginApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??BeginApp_ProcessEvent_3:
   \   000018   85..82       MOV     DPL,?V0 + 0
   \   00001B   85..83       MOV     DPH,?V0 + 1
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90....       MOV     DPTR,#BeginApp_NwkState
   \   000023   F0           MOVX    @DPTR,A
    315                    if ( (BeginApp_NwkState == DEV_ZB_COORD)
    316                        || (BeginApp_NwkState == DEV_ROUTER)
    317                        || (BeginApp_NwkState == DEV_END_DEVICE) )
   \   000024   6409         XRL     A,#0x9
   \   000026   600A         JZ      ??BeginApp_ProcessEvent_4
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6407         XRL     A,#0x7
   \   00002B   6005         JZ      ??BeginApp_ProcessEvent_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6406         XRL     A,#0x6
   \   000030   7017         JNZ     ??BeginApp_ProcessEvent_5
    318                    {
    319                      HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  
   \                     ??BeginApp_ProcessEvent_4:
   \   000032                ; Setup parameters for call to function HalLedSet
   \   000032   7A04         MOV     R2,#0x4
   \   000034   7904         MOV     R1,#0x4
   \   000036   12....       LCALL   ??HalLedSet?relay
    320                      // Start sending "the" message in a regular interval.
    321                      osal_start_timerEx( BeginApp_TaskID,
    322                                          BEGINAPP_SEND_MSG_EVT,
    323                                        BEGINAPP_SEND_MSG_TIMEOUT );
   \   000039                ; Setup parameters for call to function osal_start_timerEx
   \   000039   7C88         MOV     R4,#-0x78
   \   00003B   7D13         MOV     R5,#0x13
   \   00003D   7A01         MOV     R2,#0x1
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   90....       MOV     DPTR,#BeginApp_TaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??osal_start_timerEx?relay
    324                    }
    325                    break;
    326          
    327                  default:
    328                    break;
    329                }
    330          
    331                // Release the memory
    332                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??BeginApp_ProcessEvent_5:
   \   000049                ; Setup parameters for call to function osal_msg_deallocate
   \   000049   AA..         MOV     R2,?V0 + 0
   \   00004B   AB..         MOV     R3,?V0 + 1
   \   00004D   12....       LCALL   ??osal_msg_deallocate?relay
    333          
    334                // Next
    335                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( BeginApp_TaskID );
   \   000050                ; Setup parameters for call to function osal_msg_receive
   \                     ??BeginApp_ProcessEvent_2:
   \   000050   90....       MOV     DPTR,#BeginApp_TaskID
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   ??osal_msg_receive?relay
   \   000058   8A..         MOV     ?V0 + 0,R2
   \   00005A   8B..         MOV     ?V0 + 1,R3
   \   00005C   E5..         MOV     A,?V0 + 0
   \   00005E   7002         JNZ     ??BeginApp_ProcessEvent_6
   \   000060   E5..         MOV     A,?V0 + 1
   \                     ??BeginApp_ProcessEvent_6:
   \   000062   6046         JZ      ??BeginApp_ProcessEvent_7
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for BeginApp_ProcessEvent>_0`:
   \   00006E   00           DB        0
   \   00006F   04           DB        4
   \   000070   1A           DB        26
   \   000071   ....         DW        ??BeginApp_ProcessEvent_8
   \   000073   C0           DB        192
   \   000074   ....         DW        ??BeginApp_ProcessEvent_9
   \   000076   D1           DB        209
   \   000077   ....         DW        ??BeginApp_ProcessEvent_3
   \   000079   D3           DB        211
   \   00007A   ....         DW        ??BeginApp_ProcessEvent_10
   \   00007C   ....         DW        ??BeginApp_ProcessEvent_5
   \                     ??BeginApp_ProcessEvent_10:
   \   00007E                ; Setup parameters for call to function BeginApp_ProcessZDOMsgs
   \   00007E   AA..         MOV     R2,?V0 + 0
   \   000080   AB..         MOV     R3,?V0 + 1
   \   000082   12....       LCALL   ??BeginApp_ProcessZDOMsgs?relay
   \   000085   80C2         SJMP    ??BeginApp_ProcessEvent_5
   \                     ??BeginApp_ProcessEvent_9:
   \   000087                ; Setup parameters for call to function BeginApp_HandleKeys
   \   000087   85..82       MOV     DPL,?V0 + 0
   \   00008A   85..83       MOV     DPH,?V0 + 1
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FA           MOV     R2,A
   \   000092   85..82       MOV     DPL,?V0 + 0
   \   000095   85..83       MOV     DPH,?V0 + 1
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F9           MOV     R1,A
   \   00009C   12....       LCALL   ??BeginApp_HandleKeys?relay
   \   00009F   80A8         SJMP    ??BeginApp_ProcessEvent_5
   \                     ??BeginApp_ProcessEvent_8:
   \   0000A1                ; Setup parameters for call to function BeginApp_MessageMSGCB
   \   0000A1   AA..         MOV     R2,?V0 + 0
   \   0000A3   AB..         MOV     R3,?V0 + 1
   \   0000A5   12....       LCALL   ??BeginApp_MessageMSGCB?relay
   \   0000A8   809F         SJMP    ??BeginApp_ProcessEvent_5
    336              }
    337          
    338              // return unprocessed events
    339              return (events ^ SYS_EVENT_MSG);
   \                     ??BeginApp_ProcessEvent_7:
   \   0000AA   EE           MOV     A,R6
   \   0000AB   FA           MOV     R2,A
   \   0000AC   7480         MOV     A,#-0x80
   \   0000AE   6F           XRL     A,R7
   \                     ??BeginApp_ProcessEvent_11:
   \   0000AF   FB           MOV     R3,A
   \   0000B0   8023         SJMP    ??BeginApp_ProcessEvent_12
    340            }
    341          
    342            // Send a message out - This event is generated by a timer
    343            //  (setup in BeginApp_Init()).
    344            if ( events & BEGINAPP_SEND_MSG_EVT )
   \                     ??BeginApp_ProcessEvent_1:
   \   0000B2   EE           MOV     A,R6
   \   0000B3   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000B5   501A         JNC     ??BeginApp_ProcessEvent_13
    345            {
    346              // Send "the" message
    347              BeginApp_SendTheMessage();
   \   0000B7                ; Setup parameters for call to function BeginApp_SendTheMessage
   \   0000B7   12....       LCALL   ??BeginApp_SendTheMessage?relay
    348          
    349              // Setup to send message again
    350              osal_start_timerEx( BeginApp_TaskID,
    351                                  BEGINAPP_SEND_MSG_EVT,
    352                                BEGINAPP_SEND_MSG_TIMEOUT );
   \   0000BA                ; Setup parameters for call to function osal_start_timerEx
   \   0000BA   7C88         MOV     R4,#-0x78
   \   0000BC   7D13         MOV     R5,#0x13
   \   0000BE   7A01         MOV     R2,#0x1
   \   0000C0   7B00         MOV     R3,#0x0
   \   0000C2   90....       MOV     DPTR,#BeginApp_TaskID
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F9           MOV     R1,A
   \   0000C7   12....       LCALL   ??osal_start_timerEx?relay
    353          
    354              // return unprocessed events
    355              return (events ^ BEGINAPP_SEND_MSG_EVT);
   \   0000CA   7401         MOV     A,#0x1
   \   0000CC   6E           XRL     A,R6
   \   0000CD   FA           MOV     R2,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   80DE         SJMP    ??BeginApp_ProcessEvent_11
    356            }
    357          
    358            // Discard unknown events
    359            return 0;
   \                     ??BeginApp_ProcessEvent_13:
   \   0000D1   7A00         MOV     R2,#0x0
   \   0000D3   7B00         MOV     R3,#0x0
   \                     ??BeginApp_ProcessEvent_12:
   \   0000D5   02....       LJMP    ??Subroutine2_0 & 0xFFFF
    360          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    361          
    362          /*********************************************************************
    363           * Event Generation Functions
    364           */
    365          
    366          /*********************************************************************
    367           * @fn      BeginApp_ProcessZDOMsgs()
    368           *
    369           * @brief   Process response messages
    370           *
    371           * @param   none
    372           *
    373           * @return  none
    374           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    375          void BeginApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     BeginApp_ProcessZDOMsgs:
    376          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    377            switch ( inMsg->clusterID )
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 1,A
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for BeginApp_ProcessZDOMsgs>_0`:
   \   00001B   0000         DW        0
   \   00001D   0200         DW        2
   \   00001F   0680         DW        32774
   \   000021   ....         DW        ??BeginApp_ProcessZDOMsgs_0
   \   000023   2080         DW        32800
   \   000025   ....         DW        ??BeginApp_ProcessZDOMsgs_1
   \   000027   ....         DW        ??BeginApp_ProcessZDOMsgs_2
    378            {
    379              case End_Device_Bind_rsp:
    380                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??BeginApp_ProcessZDOMsgs_1:
   \   000029   EA           MOV     A,R2
   \   00002A   2413         ADD     A,#0x13
   \   00002C   F582         MOV     DPL,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F583         MOV     DPH,A
   \   000039   8882         MOV     DPL,R0
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   7009         JNZ     ??BeginApp_ProcessZDOMsgs_3
    381                {
    382                  // Light LED
    383                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00003E                ; Setup parameters for call to function HalLedSet
   \   00003E   7A01         MOV     R2,#0x1
   \                     ??BeginApp_ProcessZDOMsgs_4:
   \   000040   7908         MOV     R1,#0x8
   \   000042   12....       LCALL   ??HalLedSet?relay
   \   000045   8055         SJMP    ??BeginApp_ProcessZDOMsgs_2
    384                }
    385          #if defined(BLINK_LEDS)
    386                else
    387                {
    388                  // Flash LED to show failure
    389                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??BeginApp_ProcessZDOMsgs_3:
   \   000047                ; Setup parameters for call to function HalLedSet
   \   000047   7A04         MOV     R2,#0x4
   \   000049   80F5         SJMP    ??BeginApp_ProcessZDOMsgs_4
    390                }
    391          #endif
    392                break;
    393          
    394              case Match_Desc_rsp:
    395                {
    396                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??BeginApp_ProcessZDOMsgs_0:
   \   00004B                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00004B   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00004E   8A..         MOV     ?V0 + 0,R2
   \   000050   8B..         MOV     ?V0 + 1,R3
   \   000052   AE..         MOV     R6,?V0 + 0
   \   000054   AF..         MOV     R7,?V0 + 1
    397                  if ( pRsp )
   \   000056   EE           MOV     A,R6
   \   000057   7001         JNZ     ??BeginApp_ProcessZDOMsgs_5
   \   000059   EF           MOV     A,R7
   \                     ??BeginApp_ProcessZDOMsgs_5:
   \   00005A   6040         JZ      ??BeginApp_ProcessZDOMsgs_2
    398                  {
    399                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   E0           MOVX    A,@DPTR
   \   000061   7032         JNZ     ??BeginApp_ProcessZDOMsgs_6
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   602C         JZ      ??BeginApp_ProcessZDOMsgs_6
    400                    {
    401                      BeginApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000069   7402         MOV     A,#0x2
   \   00006B   90....       MOV     DPTR,#(BeginApp_DstAddr + 8)
   \   00006E   F0           MOVX    @DPTR,A
    402                      BeginApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F8           MOV     R0,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   90....       MOV     DPTR,#BeginApp_DstAddr
   \   00007C   E8           MOV     A,R0
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E9           MOV     A,R1
   \   000080   F0           MOVX    @DPTR,A
    403                      // Take the first endpoint, Can be changed to search through endpoints
    404                      BeginApp_DstAddr.endPoint = pRsp->epList[0];
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   90....       MOV     DPTR,#(BeginApp_DstAddr + 9)
   \   00008D   F0           MOVX    @DPTR,A
    405          
    406                      // Light LED
    407                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00008E                ; Setup parameters for call to function HalLedSet
   \   00008E   7A01         MOV     R2,#0x1
   \   000090   7908         MOV     R1,#0x8
   \   000092   12....       LCALL   ??HalLedSet?relay
    408                    }
    409                    osal_mem_free( pRsp );
   \                     ??BeginApp_ProcessZDOMsgs_6:
   \   000095                ; Setup parameters for call to function osal_mem_free
   \   000095   EE           MOV     A,R6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   FB           MOV     R3,A
   \   000099   12....       LCALL   ??osal_mem_free?relay
    410                  }
    411                }
    412                break;
    413            }
    414          }
   \                     ??BeginApp_ProcessZDOMsgs_2:
   \   00009C   7F02         MOV     R7,#0x2
   \   00009E   02....       LJMP    ?BANKED_LEAVE_XDATA
    415          
    416          /*********************************************************************
    417           * @fn      BeginApp_HandleKeys
    418           *
    419           * @brief   Handles all key events for this device.
    420           *
    421           * @param   shift - true if in shift/alt.
    422           * @param   keys - bit field for key events. Valid entries:
    423           *                 HAL_KEY_SW_4
    424           *                 HAL_KEY_SW_3
    425           *                 HAL_KEY_SW_2
    426           *                 HAL_KEY_SW_1
    427           *
    428           * @return  none
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          void BeginApp_HandleKeys( byte shift, byte keys )
   \                     BeginApp_HandleKeys:
    431          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    432            zAddrType_t dstAddr;
    433            
    434            // Shift is used to make each button/switch dual purpose.
    435            if ( shift )
   \   00000C   E9           MOV     A,R1
   \   00000D   6003         JZ      $+5
   \   00000F   02....       LJMP    ??BeginApp_HandleKeys_0 & 0xFFFF
    436            {
    437              if ( keys & HAL_KEY_SW_1 )
    438              {
    439              }
    440              if ( keys & HAL_KEY_SW_2 )
    441              {
    442              }
    443              if ( keys & HAL_KEY_SW_3 )
    444              {
    445              }
    446              if ( keys & HAL_KEY_SW_4 )
    447              {
    448              }
    449            }
    450            else
    451            {
    452              if ( keys & HAL_KEY_SW_1 )
    453              {
    454              }
    455          
    456              if ( keys & HAL_KEY_SW_2 )
   \   000012   75....       MOV     ?V0 + 0,#(BeginApp_ClusterList & 0xff)
   \   000015   75....       MOV     ?V0 + 1,#((BeginApp_ClusterList >> 8) & 0xff)
   \   000018   EE           MOV     A,R6
   \   000019   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001B   5064         JNC     ??BeginApp_HandleKeys_1
    457              {
    458                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   00001D                ; Setup parameters for call to function HalLedSet
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   7908         MOV     R1,#0x8
   \   000021   12....       LCALL   ??HalLedSet?relay
    459          
    460                // Initiate an End Device Bind Request for the mandatory endpoint
    461                dstAddr.addrMode = Addr16Bit;
   \   000024   7408         MOV     A,#0x8
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   7402         MOV     A,#0x2
   \   00002B   F0           MOVX    @DPTR,A
    462                dstAddr.addr.shortAddr = 0x0000; // Coordinator
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   F0           MOVX    @DPTR,A
    463                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
    464                                      BeginApp_epDesc.endPoint,
    465                                      BEGINAPP_PROFID,
    466                                      BEGINAPP_MAX_CLUSTERS, (cId_t *)BeginApp_ClusterList,
    467                                      BEGINAPP_MAX_CLUSTERS, (cId_t *)BeginApp_ClusterList,
    468                                      FALSE );
   \   000036                ; Setup parameters for call to function NLME_GetShortAddr
   \   000036   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000039   8A..         MOV     ?V0 + 2,R2
   \   00003B   8B..         MOV     ?V0 + 3,R3
   \   00003D   AC..         MOV     R4,?V0 + 2
   \   00003F   AD..         MOV     R5,?V0 + 3
   \   000041                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000041   75..00       MOV     ?V0 + 2,#0x0
   \   000044   78..         MOV     R0,#?V0 + 2
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   75..01       MOV     ?V0 + 2,#0x1
   \   000051   78..         MOV     R0,#?V0 + 2
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   78..         MOV     R0,#?V0 + 2
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   75..04       MOV     ?V0 + 2,#0x4
   \   000063   75..0F       MOV     ?V0 + 3,#0xf
   \   000066   78..         MOV     R0,#?V0 + 2
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   90....       MOV     DPTR,#BeginApp_epDesc
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   7409         MOV     A,#0x9
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   AA82         MOV     R2,DPL
   \   000077   AB83         MOV     R3,DPH
   \   000079   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00007C   7409         MOV     A,#0x9
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
    469              }
    470          
    471              if ( keys & HAL_KEY_SW_3 )
    472              {
    473              }
    474          
    475              if ( keys & HAL_KEY_SW_4 )
   \                     ??BeginApp_HandleKeys_1:
   \   000081   EE           MOV     A,R6
   \   000082   A2E3         MOV     C,0xE0 /* A   */.3
   \   000084   5056         JNC     ??BeginApp_HandleKeys_0
    476              {
    477                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000086                ; Setup parameters for call to function HalLedSet
   \   000086   7A00         MOV     R2,#0x0
   \   000088   7908         MOV     R1,#0x8
   \   00008A   12....       LCALL   ??HalLedSet?relay
    478                // Initiate a Match Description Request (Service Discovery)
    479                dstAddr.addrMode = AddrBroadcast;
   \   00008D   7408         MOV     A,#0x8
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   740F         MOV     A,#0xf
   \   000094   F0           MOVX    @DPTR,A
    480                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
   \   000095   85..82       MOV     DPL,?XSP + 0
   \   000098   85..83       MOV     DPH,?XSP + 1
   \   00009B   74FF         MOV     A,#-0x1
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   F0           MOVX    @DPTR,A
    481                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    482                                  BEGINAPP_PROFID,
    483                                  BEGINAPP_MAX_CLUSTERS, (cId_t *)BeginApp_ClusterList,
    484                                  BEGINAPP_MAX_CLUSTERS, (cId_t *)BeginApp_ClusterList,
    485                                  FALSE );
   \   0000A0                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000A0   75..00       MOV     ?V0 + 2,#0x0
   \   0000A3   78..         MOV     R0,#?V0 + 2
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A8   78..         MOV     R0,#?V0 + 0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   75..01       MOV     ?V0 + 2,#0x1
   \   0000B0   78..         MOV     R0,#?V0 + 2
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   75..04       MOV     ?V0 + 0,#0x4
   \   0000BD   75..0F       MOV     ?V0 + 1,#0xf
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   7901         MOV     R1,#0x1
   \   0000C7   7CFF         MOV     R4,#-0x1
   \   0000C9   7DFF         MOV     R5,#-0x1
   \   0000CB   7408         MOV     A,#0x8
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   AA82         MOV     R2,DPL
   \   0000D2   AB83         MOV     R3,DPH
   \   0000D4   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0000D7   7408         MOV     A,#0x8
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
    486              }
    487            }
    488          }
   \                     ??BeginApp_HandleKeys_0:
   \   0000DC   7409         MOV     A,#0x9
   \   0000DE                REQUIRE ?Subroutine1
   \   0000DE                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine2_0
   \   000003                ; // Fall through to label ??Subroutine2_0
    489          
    490          /*********************************************************************
    491           * LOCAL FUNCTIONS
    492           */
    493          
    494          /*********************************************************************
    495           * @fn      BeginApp_MessageMSGCB
    496           *
    497           * @brief   Data message processor callback.  This function processes
    498           *          any incoming data - probably from other devices.  So, based
    499           *          on cluster ID, perform the intended action.
    500           *
    501           * @param   none
    502           *
    503           * @return  none
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          void BeginApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     BeginApp_MessageMSGCB:
    506          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    507            switch ( pkt->clusterId )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6401         XRL     A,#0x1
   \   00000F   7002         JNZ     ??BeginApp_MessageMSGCB_0
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \                     ??BeginApp_MessageMSGCB_0:
   \   000013   7016         JNZ     ??BeginApp_MessageMSGCB_1
    508            {
    509              case BEGINAPP_CLUSTERID:
    510                // "the" message
    511          #if defined( LCD_SUPPORTED )
    512                HalLcdWriteScreen( (char*)pkt->cmd.Data, "rcvd" );
   \   000015                ; Setup parameters for call to function HalLcdWriteScreen
   \   000015   7C..         MOV     R4,#(`?<Constant "rcvd">` & 0xff)
   \   000017   7D..         MOV     R5,#((`?<Constant "rcvd">` >> 8) & 0xff)
   \   000019   EA           MOV     A,R2
   \   00001A   2421         ADD     A,#0x21
   \   00001C   F582         MOV     DPL,A
   \   00001E   EB           MOV     A,R3
   \   00001F   3400         ADDC    A,#0x0
   \   000021   F583         MOV     DPH,A
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   ??HalLcdWriteScreen?relay
    513          #elif defined( WIN32 )
    514                WPRINTSTR( pkt->cmd.Data );
    515          #endif
    516                break;
    517            }
    518          }
   \                     ??BeginApp_MessageMSGCB_1:
   \   00002B   02....       LJMP    ?Subroutine0 & 0xFFFF
    519          
    520          /*********************************************************************
    521           * @fn      BeginApp_SendTheMessage
    522           *
    523           * @brief   Send "the" message.
    524           *
    525           * @param   none
    526           *
    527           * @return  none
    528           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    529          void BeginApp_SendTheMessage( void )
   \                     BeginApp_SendTheMessage:
    530          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 150
   \   000005   746A         MOV     A,#0x6a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    531            int a=BeginApp_TransID%5;
   \   00000A   90....       MOV     DPTR,#BeginApp_TransID
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   75F005       MOV     B,#0x5
   \   000011   84           DIV     AB
   \   000012   AAF0         MOV     R2,B
   \   000014   8A82         MOV     DPL,R2
   \   000016   A882         MOV     R0,DPL
    532            char theMessage[5][30] = {"Hello World","iniil","asfweofj","9jfjf0","jowef98383"};
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7583..       MOV     DPH,#((`?<Constant {"Hello World", "iniil", "asfweofj"` >> 8) & 0xff)
   \   000025   7582..       MOV     DPL,#(`?<Constant {"Hello World", "iniil", "asfweofj"` & 0xff)
   \   000028   7496         MOV     A,#-0x6a
   \   00002A   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    533          
    534            if ( AF_DataRequest( &BeginApp_DstAddr, &BeginApp_epDesc,
    535                                 BEGINAPP_CLUSTERID,
    536                                 (byte)osal_strlen( theMessage[a] ) + 1,
    537                                 (byte *)&theMessage[a],
    538                                 &BeginApp_TransID,
    539                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00002D   E8           MOV     A,R0
   \   00002E   75F01E       MOV     B,#0x1e
   \   000031   A4           MUL     AB
   \   000032   F8           MOV     R0,A
   \   000033   A9F0         MOV     R1,B
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   E582         MOV     A,DPL
   \   00003D   28           ADD     A,R0
   \   00003E   F5..         MOV     ?V0 + 0,A
   \   000040   E583         MOV     A,DPH
   \   000042   39           ADDC    A,R1
   \   000043   F5..         MOV     ?V0 + 1,A
   \   000045                ; Setup parameters for call to function AF_DataRequest
   \   000045   75..1E       MOV     ?V0 + 2,#0x1e
   \   000048   78..         MOV     R0,#?V0 + 2
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004D   75....       MOV     ?V0 + 2,#(BeginApp_TransID & 0xff)
   \   000050   75....       MOV     ?V0 + 3,#((BeginApp_TransID >> 8) & 0xff)
   \   000053   78..         MOV     R0,#?V0 + 2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D                ; Setup parameters for call to function osal_strlen
   \   00005D   AA..         MOV     R2,?V0 + 0
   \   00005F   AB..         MOV     R3,?V0 + 1
   \   000061   12....       LCALL   ??osal_strlen?relay
   \   000064   EA           MOV     A,R2
   \   000065   F8           MOV     R0,A
   \   000066   7401         MOV     A,#0x1
   \   000068   28           ADD     A,R0
   \   000069   F5..         MOV     ?V0 + 0,A
   \   00006B   E4           CLR     A
   \   00006C   3400         ADDC    A,#0x0
   \   00006E   F5..         MOV     ?V0 + 1,A
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   75..01       MOV     ?V0 + 0,#0x1
   \   000078   75..00       MOV     ?V0 + 1,#0x0
   \   00007B   78..         MOV     R0,#?V0 + 0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   7920         MOV     R1,#0x20
   \   000082   7C..         MOV     R4,#(BeginApp_epDesc & 0xff)
   \   000084   7D..         MOV     R5,#((BeginApp_epDesc >> 8) & 0xff)
   \   000086   7A..         MOV     R2,#(BeginApp_DstAddr & 0xff)
   \   000088   7B..         MOV     R3,#((BeginApp_DstAddr >> 8) & 0xff)
   \   00008A   12....       LCALL   ??AF_DataRequest?relay
   \   00008D   7409         MOV     A,#0x9
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
    540            {
    541              // Successfully requested to be sent.
    542            }
    543            else
    544            {
    545              // Error occurred in request to send.
    546            }
    547          }
   \   000092   7496         MOV     A,#-0x6a
   \   000094   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for T1_FLAG1>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for IR_CNT>`:
   \   000000   6400         DW 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BeginApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BeginApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BeginApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BeginApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BeginApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BeginApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BeginApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BeginApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BeginApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BeginApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BeginApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BeginApp_SendTheMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BeginApp">`:
   \   000000   42656769     DB "BeginApp"
   \            6E417070
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "rcvd">`:
   \   000000   72637664     DB "rcvd"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {"Hello World", "iniil", "asfweofj"`:
   \   000000   48656C6C     DB "Hello World"
   \            6F20576F
   \            726C6400
   \   00000C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \            0000    
   \   00001E   696E6969     DB "iniil"
   \            6C00    
   \   000024   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   000034   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00003C   61736677     DB "asfweofj"
   \            656F666A
   \            00      
   \   000045   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \            00000000
   \            00      
   \   00005A   396A666A     DB "9jfjf0"
   \            663000  
   \   000061   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \            00000000
   \            000000  
   \   000078   6A6F7765     DB "jowef98383"
   \            66393833
   \            383300  
   \   000083   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \            000000  
    548          
    549          /*********************************************************************
    550          *********************************************************************/

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     BeginApp_HandleKeys              1      0     42
       -> HalLedSet                   0      0     42
       -> NLME_GetShortAddr           0      0     42
       -> ZDP_EndDeviceBindReq        0      0     60
       -> HalLedSet                   0      0     42
       -> ZDP_MatchDescReq            0      0     58
     BeginApp_Init                    2      0      0
       -> afRegister                  4      0      0
       -> RegisterForKeys             4      0      0
       -> HalLcdWriteString           4      0      0
       -> ZDO_RegisterForZDOMsg       4      0      0
       -> ZDO_RegisterForZDOMsg       4      0      0
     BeginApp_MessageMSGCB            2      0     12
       -> HalLcdWriteScreen           4      0      0
     BeginApp_ProcessEvent            0      0     12
       -> osal_msg_receive            0      0     24
       -> HalLedSet                   0      0     24
       -> osal_start_timerEx          0      0     24
       -> osal_msg_deallocate         0      0     24
       -> osal_msg_receive            0      0     24
       -> BeginApp_ProcessZDOMsgs     0      0     24
       -> BeginApp_HandleKeys         0      0     24
       -> BeginApp_MessageMSGCB       0      0     24
       -> BeginApp_SendTheMessage     0      0     24
       -> osal_start_timerEx          0      0     24
     BeginApp_ProcessZDOMsgs          0      0     22
       -> HalLedSet                   0      0     20
       -> HalLedSet                   0      0     20
       -> ZDO_ParseEPListRsp          0      0     20
       -> HalLedSet                   0      0     20
       -> osal_mem_free               0      0     20
     BeginApp_SendTheMessage          2      0    183
       -> osal_strlen                 0      0    334
       -> AF_DataRequest              0      0    342


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     BeginApp_ClusterList                              2
     BeginApp_SimpleDesc                              12
     BeginApp_epDesc                                   6
     BeginApp_TaskID                                   1
     BeginApp_NwkState                                 1
     BeginApp_TransID                                  1
     BeginApp_DstAddr                                 12
     T1_FLAG1                                          1
     T1_CNT1                                           2
     IR_Encoding                                     200
     IR_CNT                                            2
     BeginApp_Init                                   113
     ?Subroutine0                                      7
     BeginApp_ProcessEvent                           216
     ??Subroutine2_0                                   5
     BeginApp_ProcessZDOMsgs                         161
     BeginApp_HandleKeys                             222
     ?Subroutine1                                      3
     BeginApp_MessageMSGCB                            46
     BeginApp_SendTheMessage                         151
     ?<Initializer for T1_FLAG1>                       1
     ?<Initializer for IR_CNT>                         2
     ??BeginApp_Init?relay                             6
     ??BeginApp_ProcessEvent?relay                     6
     ??BeginApp_ProcessZDOMsgs?relay                   6
     ??BeginApp_HandleKeys?relay                       6
     ??BeginApp_MessageMSGCB?relay                     6
     ??BeginApp_SendTheMessage?relay                   6
     ?<Constant "BeginApp">                            9
     ?<Constant "rcvd">                                5
     ?<Constant {"Hello World", "iniil", "asfweofj"  150

 
 924 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   3 bytes in segment XDATA_I
   3 bytes in segment XDATA_ID
 178 bytes in segment XDATA_ROM_C
 223 bytes in segment XDATA_Z
 
 963 bytes of CODE  memory
 178 bytes of CONST memory
 226 bytes of XDATA memory

Errors: none
Warnings: 1
