///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               07/Nov/2013  18:57:36 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C51 /
//                          RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Texa /
//                          s Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\Source\BeginApp.c         /
//    Command line       =  -f "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10 /
//                          \C51RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\ /
//                          Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Proje /
//                          cts\zstack\Samples\BeginApp\CC2530DB\..\..\..\Too /
//                          ls\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ             /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\Tools\ /
//                          CC2530DB\f8wConfig.cfg" (-DSECURE=0               /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x04000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "E:\C51RF-CC2530-PK无线Zig /
//                          Bee网络开发平台V1.10\C51RF-CC2530演示程序\ZigBee2 /
//                          007_PRO演示测试程序\Texas                         /
//                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\BeginApp\Source\BeginApp.c" -D       /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\CoordinatorEB\L /
//                          ist\" -lA "E:\C51RF-CC2530-PK无线ZigBee网络开发平 /
//                          台V1.10\C51RF-CC2530演示程序\ZigBee2007_PRO演示测 /
//                          试程序\Texas Instruments\ZStack-CC2530-2.2.0-1.3. /
//                          0\Projects\zstack\Samples\BeginApp\CC2530DB\Coord /
//                          inatorEB\List\" --diag_suppress Pe001,Pa010 -o    /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\CoordinatorEB\O /
//                          bj\" -e --require_prototypes --debug              /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I "E:\C51RF-CC2530-PK无线Zig /
//                          Bee网络开发平台V1.10\C51RF-CC2530演示程序\ZigBee2 /
//                          007_PRO演示测试程序\Texas                         /
//                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\BeginApp\CC2530DB\" -I               /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\SOURCE\" -I  /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\ZMAIN\ /
//                          TI2530DB\" -I "E:\C51RF-CC2530-PK无线ZigBee网络开 /
//                          发平台V1.10\C51RF-CC2530演示程序\ZigBee2007_PRO演 /
//                          示测试程序\Texas Instruments\ZStack-CC2530-2.2.0- /
//                          1.3.0\Projects\zstack\Samples\BeginApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MT\" -I                  /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\HAL\INCLUDE\" -I                       /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\HAL\TARGET\CC2530EB\" -I               /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\OSAL\MCU\CCSOC\" -I                    /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\OSAL\INCLUDE\" -I                      /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\STACK\AF\" -I                          /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\STACK\NWK\" -I                         /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\STACK\SEC\" -I                         /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\STACK\SAPI\" -I                        /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\STACK\SYS\" -I                         /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\STACK\ZDO\" -I                         /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\ZMAC\F8W\" -I                          /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\ZMAC\" -I "E:\C51RF-CC2530-PK无线ZigBe /
//                          e网络开发平台V1.10\C51RF-CC2530演示程序\ZigBee200 /
//                          7_PRO演示测试程序\Texas                           /
//                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\BeginApp\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\SERVICES\SADDR\" -I                       /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\SERVICES\SDATA\" -I                    /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\MAC\INCLUDE\" -I                       /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\MAC\HIGH_LEVEL\" -I                    /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\MAC\LOW_LEVEL\srf04\" -I               /
//                          "E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C5 /
//                          1RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Tex /
//                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\BeginApp\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I   /
//                          "C:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.3 Evaluation version\8051\INC\" -I "C:\Program  /
//                          Files\IAR Systems\Embedded Workbench 5.3          /
//                          Evaluation version\8051\INC\CLIB\" -Ohz           /
//    List file          =  E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C51 /
//                          RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Texa /
//                          s Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ /
//                          zstack\Samples\BeginApp\CC2530DB\CoordinatorEB\Li /
//                          st\BeginApp.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME BeginApp

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??BeginApp_HandleKeys?relay
        EXTERN ??BeginApp_MessageMSGCB?relay
        EXTERN ??BeginApp_ProcessZDOMsgs?relay
        EXTERN ??BeginApp_SendTheMessage?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??BeginApp_HandleKeys?relay
        FUNCTION ??BeginApp_HandleKeys?relay,0203H
        PUBLIC ??BeginApp_Init?relay
        FUNCTION ??BeginApp_Init?relay,0203H
        PUBLIC ??BeginApp_MessageMSGCB?relay
        FUNCTION ??BeginApp_MessageMSGCB?relay,0203H
        PUBLIC ??BeginApp_ProcessEvent?relay
        FUNCTION ??BeginApp_ProcessEvent?relay,0203H
        PUBLIC ??BeginApp_ProcessZDOMsgs?relay
        FUNCTION ??BeginApp_ProcessZDOMsgs?relay,0203H
        PUBLIC ??BeginApp_SendTheMessage?relay
        FUNCTION ??BeginApp_SendTheMessage?relay,0203H
        PUBLIC BeginApp_ClusterList
        PUBLIC BeginApp_DstAddr
        PUBLIC BeginApp_HandleKeys
        FUNCTION BeginApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC BeginApp_Init
        FUNCTION BeginApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC BeginApp_MessageMSGCB
        FUNCTION BeginApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC BeginApp_NwkState
        PUBLIC BeginApp_ProcessEvent
        FUNCTION BeginApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC BeginApp_ProcessZDOMsgs
        FUNCTION BeginApp_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC BeginApp_SendTheMessage
        FUNCTION BeginApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC BeginApp_SimpleDesc
        PUBLIC BeginApp_TaskID
        PUBLIC BeginApp_TransID
        PUBLIC BeginApp_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
HalLedSet           SYMBOL "HalLedSet"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
osal_mem_free       SYMBOL "osal_mem_free"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
osal_strlen         SYMBOL "osal_strlen"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
BeginApp_HandleKeys SYMBOL "BeginApp_HandleKeys"
??BeginApp_HandleKeys?relay SYMBOL "?relay", BeginApp_HandleKeys
BeginApp_Init       SYMBOL "BeginApp_Init"
??BeginApp_Init?relay SYMBOL "?relay", BeginApp_Init
BeginApp_MessageMSGCB SYMBOL "BeginApp_MessageMSGCB"
??BeginApp_MessageMSGCB?relay SYMBOL "?relay", BeginApp_MessageMSGCB
BeginApp_ProcessEvent SYMBOL "BeginApp_ProcessEvent"
??BeginApp_ProcessEvent?relay SYMBOL "?relay", BeginApp_ProcessEvent
BeginApp_ProcessZDOMsgs SYMBOL "BeginApp_ProcessZDOMsgs"
??BeginApp_ProcessZDOMsgs?relay SYMBOL "?relay", BeginApp_ProcessZDOMsgs
BeginApp_SendTheMessage SYMBOL "BeginApp_SendTheMessage"
??BeginApp_SendTheMessage?relay SYMBOL "?relay", BeginApp_SendTheMessage

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H

// E:\C51RF-CC2530-PK无线ZigBee网络开发平台V1.10\C51RF-CC2530演示程序\ZigBee2007_PRO演示测试程序\Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\BeginApp\Source\BeginApp.c
//    1 /**************************************************************************************************
//    2   Filename:       BeginApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Begin Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Begin"
//   45   application every 15 seconds.  The application will also
//   46   receive "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "OSAL.h"
//   64 #include "AF.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 
//   69 #include "BeginApp.h"
//   70 #include "DebugTrace.h"
//   71 
//   72 #if !defined( WIN32 )
//   73   #include "OnBoard.h"
//   74 #endif
//   75 
//   76 /* HAL */
//   77 #include "hal_lcd.h"
//   78 #include "hal_led.h"
//   79 #include "hal_key.h"
//   80 #include "hal_uart.h"
//   81 
//   82 /*********************************************************************
//   83  * MACROS
//   84  */
//   85 
//   86 /*********************************************************************
//   87  * CONSTANTS
//   88  */
//   89 
//   90 /*********************************************************************
//   91  * TYPEDEFS
//   92  */
//   93 
//   94 /*********************************************************************
//   95  * GLOBAL VARIABLES
//   96  */
//   97 
//   98 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   99 const cId_t BeginApp_ClusterList[BEGINAPP_MAX_CLUSTERS] =
BeginApp_ClusterList:
        DW 1
//  100 {
//  101   BEGINAPP_CLUSTERID
//  102 };
//  103 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  104 const SimpleDescriptionFormat_t BeginApp_SimpleDesc =
BeginApp_SimpleDesc:
        DB 10
        DW 3844, 1
        DB 0, 1
        DW BeginApp_ClusterList
        DB 1
        DW BeginApp_ClusterList
//  105 {
//  106   BEGINAPP_ENDPOINT,              //  int Endpoint;
//  107   BEGINAPP_PROFID,                //  uint16 AppProfId[2];
//  108   BEGINAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  109   BEGINAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  110   BEGINAPP_FLAGS,                 //  int   AppFlags:4;
//  111   BEGINAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  112   (cId_t *)BeginApp_ClusterList,  //  byte *pAppInClusterList;
//  113   BEGINAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  114   (cId_t *)BeginApp_ClusterList   //  byte *pAppInClusterList;
//  115 };
//  116 
//  117 // This is the Endpoint/Interface description.  It is defined here, but
//  118 // filled-in in BeginApp_Init().  Another way to go would be to fill
//  119 // in the structure here and make it a "const" (in code space).  The
//  120 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  121 endPointDesc_t BeginApp_epDesc;
BeginApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  122 
//  123 /*********************************************************************
//  124  * EXTERNAL VARIABLES
//  125  */
//  126 
//  127 /*********************************************************************
//  128  * EXTERNAL FUNCTIONS
//  129  */
//  130 
//  131 /*********************************************************************
//  132  * LOCAL VARIABLES
//  133  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  134 byte BeginApp_TaskID;   // Task ID for internal task/event processing
BeginApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  135                           // This variable will be received when
//  136                           // BeginApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  137 devStates_t BeginApp_NwkState;
BeginApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  138 
//  139 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  140 byte BeginApp_TransID;  // This is the unique message ID (counter)
BeginApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  141 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  142 afAddrType_t BeginApp_DstAddr;
BeginApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  143 
//  144 /*********************************************************************
//  145  * LOCAL FUNCTIONS
//  146  */
//  147 void BeginApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  148 void BeginApp_HandleKeys( byte shift, byte keys );
//  149 void BeginApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  150 void BeginApp_SendTheMessage( void );
//  151 
//  152 /*********************************************************************
//  153  * NETWORK LAYER CALLBACKS
//  154  */
//  155 
//  156 /*********************************************************************
//  157  * PUBLIC FUNCTIONS
//  158  */
//  159 
//  160 /*********************************************************************
//  161  * @fn      BeginApp_Init
//  162  *
//  163  * @brief   Initialization function for the Begin App Task.
//  164  *          This is called during initialization and should contain
//  165  *          any application specific initialization (ie. hardware
//  166  *          initialization/setup, table initialization, power up
//  167  *          notificaiton ... ).
//  168  *
//  169  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  170  *                    used to send messages and set timers.
//  171  *
//  172  * @return  none
//  173  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  174 void BeginApp_Init( byte task_id )
BeginApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function BeginApp_Init
//  175 {
        FUNCALL BeginApp_Init, afRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  176   BeginApp_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#BeginApp_TaskID
        MOVX    @DPTR,A
//  177   BeginApp_NwkState = DEV_INIT;
        MOV     A,#0x1
        MOV     DPTR,#BeginApp_NwkState
        MOVX    @DPTR,A
//  178   BeginApp_TransID = 0;
        CLR     A
        MOV     DPTR,#BeginApp_TransID
        MOVX    @DPTR,A
//  179 
//  180   // Device hardware initialization can be added here or in main() (Zmain.c).
//  181   // If the hardware is application specific - add it here.
//  182   // If the hardware is other parts of the device add it in main().
//  183 
//  184   BeginApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#(BeginApp_DstAddr + 8)
        MOVX    @DPTR,A
//  185   BeginApp_DstAddr.endPoint = 0;
        MOV     DPTR,#(BeginApp_DstAddr + 9)
        MOVX    @DPTR,A
//  186   BeginApp_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#BeginApp_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  187 
//  188   // Fill out the endpoint description.
//  189   BeginApp_epDesc.endPoint = BEGINAPP_ENDPOINT;
        MOV     A,#0xa
        MOV     DPTR,#BeginApp_epDesc
        MOVX    @DPTR,A
//  190   BeginApp_epDesc.task_id = &BeginApp_TaskID;
        MOV     DPTR,#(BeginApp_epDesc + 1)
        MOV     A,#(BeginApp_TaskID & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((BeginApp_TaskID >> 8) & 0xff)
        MOVX    @DPTR,A
//  191   BeginApp_epDesc.simpleDesc
//  192             = (SimpleDescriptionFormat_t *)&BeginApp_SimpleDesc;
        MOV     DPTR,#(BeginApp_epDesc + 3)
        MOV     A,#(BeginApp_SimpleDesc & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((BeginApp_SimpleDesc >> 8) & 0xff)
        MOVX    @DPTR,A
//  193   BeginApp_epDesc.latencyReq = noLatencyReqs;
        CLR     A
        MOV     DPTR,#(BeginApp_epDesc + 5)
        MOVX    @DPTR,A
//  194 
//  195   // Register the endpoint description with the AF
//  196   afRegister( &BeginApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#(BeginApp_epDesc & 0xff)
        MOV     R3,#((BeginApp_epDesc >> 8) & 0xff)
        LCALL   ??afRegister?relay
//  197 
//  198   // Register for all key events - This app will handle all key events
//  199   RegisterForKeys( BeginApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#BeginApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  200 
//  201   // Update the display
//  202 #if defined ( LCD_SUPPORTED )
//  203     HalLcdWriteString( "BeginApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#(`?<Constant "BeginApp">` & 0xff)
        MOV     R3,#((`?<Constant "BeginApp">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  204 #endif
//  205     
//  206   ZDO_RegisterForZDOMsg( BeginApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#BeginApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  207   ZDO_RegisterForZDOMsg( BeginApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#BeginApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
        CFI EndBlock cfiBlock0
//  208 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  209 
//  210 /*********************************************************************
//  211  * @fn      BeginApp_ProcessEvent
//  212  *
//  213  * @brief   Begin Application Task event processor.  This function
//  214  *          is called to process all events for the task.  Events
//  215  *          include timers, messages and any other user defined events.
//  216  *
//  217  * @param   task_id  - The OSAL assigned task ID.
//  218  * @param   events - events to process.  This is a bit map and can
//  219  *                   contain more than one event.
//  220  *
//  221  * @return  none
//  222  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  223 UINT16 BeginApp_ProcessEvent( byte task_id, UINT16 events )
BeginApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function BeginApp_ProcessEvent
//  224 {
        FUNCALL BeginApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessEvent, BeginApp_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessEvent, BeginApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessEvent, BeginApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessEvent, BeginApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  225   afIncomingMSGPacket_t *MSGpkt;
//  226   afDataConfirm_t *afDataConfirm;
//  227 
//  228   // Data Confirmation message fields
//  229   byte sentEP;
//  230   ZStatus_t sentStatus;
//  231   byte sentTransID;       // This should match the value sent
//  232   (void)task_id;  // Intentionally unreferenced parameter
//  233 
//  234   if ( events & SYS_EVENT_MSG )
        MOV     A,#-0x80
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??BeginApp_ProcessEvent_0
        MOV     A,R1
??BeginApp_ProcessEvent_0:
        JNZ     $+5
        LJMP    ??BeginApp_ProcessEvent_1 & 0xFFFF
//  235   {
//  236     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( BeginApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??BeginApp_ProcessEvent_2
//  237     while ( MSGpkt )
//  238     {
//  239       switch ( MSGpkt->hdr.event )
//  240       {
//  241         case ZDO_CB_MSG:
//  242           BeginApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  243           break;
//  244           
//  245         case KEY_CHANGE:
//  246           BeginApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  247           break;
//  248 
//  249         case AF_DATA_CONFIRM_CMD:
//  250           // This message is received as a confirmation of a data packet sent.
//  251           // The status is of ZStatus_t type [defined in ZComDef.h]
//  252           // The message fields are defined in AF.h
//  253           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  254           sentEP = afDataConfirm->endpoint;
//  255           sentStatus = afDataConfirm->hdr.status;
//  256           sentTransID = afDataConfirm->transID;
//  257           (void)sentEP;
//  258           (void)sentTransID;
//  259 
//  260           // Action taken when confirmation is received.
//  261           if ( sentStatus != ZSuccess )
//  262           {
//  263             // The data wasn't delivered -- Do something
//  264           }
//  265           break;
//  266 
//  267         case AF_INCOMING_MSG_CMD:
//  268           BeginApp_MessageMSGCB( MSGpkt );
//  269           break;
//  270 
//  271         case ZDO_STATE_CHANGE:
//  272           BeginApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??BeginApp_ProcessEvent_3:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#BeginApp_NwkState
        MOVX    @DPTR,A
//  273           if ( (BeginApp_NwkState == DEV_ZB_COORD)
//  274               || (BeginApp_NwkState == DEV_ROUTER)
//  275               || (BeginApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x9
        JZ      ??BeginApp_ProcessEvent_4
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??BeginApp_ProcessEvent_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??BeginApp_ProcessEvent_5
//  276           {
//  277             // Start sending "the" message in a regular interval.
//  278             osal_start_timerEx( BeginApp_TaskID,
//  279                                 BEGINAPP_SEND_MSG_EVT,
//  280                               BEGINAPP_SEND_MSG_TIMEOUT );
??BeginApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#BeginApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  281           }
//  282           break;
//  283 
//  284         default:
//  285           break;
//  286       }
//  287 
//  288       // Release the memory
//  289       osal_msg_deallocate( (uint8 *)MSGpkt );
??BeginApp_ProcessEvent_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  290 
//  291       // Next
//  292       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( BeginApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??BeginApp_ProcessEvent_2:
        MOV     DPTR,#BeginApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        JNZ     ??BeginApp_ProcessEvent_6
        MOV     A,?V0 + 1
??BeginApp_ProcessEvent_6:
        JZ      ??BeginApp_ProcessEvent_7
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for BeginApp_ProcessEvent>_0`:
        DATA
        DB        0
        DB        4
        DB        26
        DW        ??BeginApp_ProcessEvent_8
        DB        192
        DW        ??BeginApp_ProcessEvent_9
        DB        209
        DW        ??BeginApp_ProcessEvent_3
        DB        211
        DW        ??BeginApp_ProcessEvent_10
        DW        ??BeginApp_ProcessEvent_5
        CODE
??BeginApp_ProcessEvent_10:
        ; Setup parameters for call to function BeginApp_ProcessZDOMsgs
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??BeginApp_ProcessZDOMsgs?relay
        SJMP    ??BeginApp_ProcessEvent_5
??BeginApp_ProcessEvent_9:
        ; Setup parameters for call to function BeginApp_HandleKeys
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??BeginApp_HandleKeys?relay
        SJMP    ??BeginApp_ProcessEvent_5
??BeginApp_ProcessEvent_8:
        ; Setup parameters for call to function BeginApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??BeginApp_MessageMSGCB?relay
        SJMP    ??BeginApp_ProcessEvent_5
//  293     }
//  294 
//  295     // return unprocessed events
//  296     return (events ^ SYS_EVENT_MSG);
??BeginApp_ProcessEvent_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,#-0x80
        XRL     A,R7
??BeginApp_ProcessEvent_11:
        MOV     R3,A
        SJMP    ??BeginApp_ProcessEvent_12
//  297   }
//  298 
//  299   // Send a message out - This event is generated by a timer
//  300   //  (setup in BeginApp_Init()).
//  301   if ( events & BEGINAPP_SEND_MSG_EVT )
??BeginApp_ProcessEvent_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??BeginApp_ProcessEvent_13
//  302   {
//  303     // Send "the" message
//  304     BeginApp_SendTheMessage();
        ; Setup parameters for call to function BeginApp_SendTheMessage
        LCALL   ??BeginApp_SendTheMessage?relay
//  305 
//  306     // Setup to send message again
//  307     osal_start_timerEx( BeginApp_TaskID,
//  308                         BEGINAPP_SEND_MSG_EVT,
//  309                       BEGINAPP_SEND_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#BeginApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  310 
//  311     // return unprocessed events
//  312     return (events ^ BEGINAPP_SEND_MSG_EVT);
        MOV     A,#0x1
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
        SJMP    ??BeginApp_ProcessEvent_11
//  313   }
//  314 
//  315   // Discard unknown events
//  316   return 0;
??BeginApp_ProcessEvent_13:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock2
??BeginApp_ProcessEvent_12:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  317 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  318 
//  319 /*********************************************************************
//  320  * Event Generation Functions
//  321  */
//  322 
//  323 /*********************************************************************
//  324  * @fn      BeginApp_ProcessZDOMsgs()
//  325  *
//  326  * @brief   Process response messages
//  327  *
//  328  * @param   none
//  329  *
//  330  * @return  none
//  331  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  332 void BeginApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
BeginApp_ProcessZDOMsgs:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function BeginApp_ProcessZDOMsgs
//  333 {
        FUNCALL BeginApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  334   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for BeginApp_ProcessZDOMsgs>_0`:
        DATA
        DW        0
        DW        2
        DW        32774
        DW        ??BeginApp_ProcessZDOMsgs_0
        DW        32800
        DW        ??BeginApp_ProcessZDOMsgs_1
        DW        ??BeginApp_ProcessZDOMsgs_2
        CODE
//  335   {
//  336     case End_Device_Bind_rsp:
//  337       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
??BeginApp_ProcessZDOMsgs_1:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JNZ     ??BeginApp_ProcessZDOMsgs_3
//  338       {
//  339         // Light LED
//  340         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??BeginApp_ProcessZDOMsgs_4:
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        SJMP    ??BeginApp_ProcessZDOMsgs_2
//  341       }
//  342 #if defined(BLINK_LEDS)
//  343       else
//  344       {
//  345         // Flash LED to show failure
//  346         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??BeginApp_ProcessZDOMsgs_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        SJMP    ??BeginApp_ProcessZDOMsgs_4
//  347       }
//  348 #endif
//  349       break;
//  350 
//  351     case Match_Desc_rsp:
//  352       {
//  353         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??BeginApp_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  354         if ( pRsp )
        MOV     A,R6
        JNZ     ??BeginApp_ProcessZDOMsgs_5
        MOV     A,R7
??BeginApp_ProcessZDOMsgs_5:
        JZ      ??BeginApp_ProcessZDOMsgs_2
//  355         {
//  356           if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??BeginApp_ProcessZDOMsgs_6
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??BeginApp_ProcessZDOMsgs_6
//  357           {
//  358             BeginApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     A,#0x2
        MOV     DPTR,#(BeginApp_DstAddr + 8)
        MOVX    @DPTR,A
//  359             BeginApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#BeginApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  360             // Take the first endpoint, Can be changed to search through endpoints
//  361             BeginApp_DstAddr.endPoint = pRsp->epList[0];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#(BeginApp_DstAddr + 9)
        MOVX    @DPTR,A
//  362 
//  363             // Light LED
//  364             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  365           }
//  366           osal_mem_free( pRsp );
??BeginApp_ProcessZDOMsgs_6:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
        CFI EndBlock cfiBlock4
//  367         }
//  368       }
//  369       break;
//  370   }
//  371 }
??BeginApp_ProcessZDOMsgs_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  372 
//  373 /*********************************************************************
//  374  * @fn      BeginApp_HandleKeys
//  375  *
//  376  * @brief   Handles all key events for this device.
//  377  *
//  378  * @param   shift - true if in shift/alt.
//  379  * @param   keys - bit field for key events. Valid entries:
//  380  *                 HAL_KEY_SW_4
//  381  *                 HAL_KEY_SW_3
//  382  *                 HAL_KEY_SW_2
//  383  *                 HAL_KEY_SW_1
//  384  *
//  385  * @return  none
//  386  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  387 void BeginApp_HandleKeys( byte shift, byte keys )
BeginApp_HandleKeys:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function BeginApp_HandleKeys
//  388 {
        FUNCALL BeginApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_HandleKeys, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R6,A
//  389   zAddrType_t dstAddr;
//  390   
//  391   // Shift is used to make each button/switch dual purpose.
//  392   if ( shift )
        MOV     A,R1
        JZ      $+5
        LJMP    ??BeginApp_HandleKeys_0 & 0xFFFF
//  393   {
//  394     if ( keys & HAL_KEY_SW_1 )
//  395     {
//  396     }
//  397     if ( keys & HAL_KEY_SW_2 )
//  398     {
//  399     }
//  400     if ( keys & HAL_KEY_SW_3 )
//  401     {
//  402     }
//  403     if ( keys & HAL_KEY_SW_4 )
//  404     {
//  405     }
//  406   }
//  407   else
//  408   {
//  409     if ( keys & HAL_KEY_SW_1 )
//  410     {
//  411     }
//  412 
//  413     if ( keys & HAL_KEY_SW_2 )
        MOV     ?V0 + 0,#(BeginApp_ClusterList & 0xff)
        MOV     ?V0 + 1,#((BeginApp_ClusterList >> 8) & 0xff)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??BeginApp_HandleKeys_1
//  414     {
//  415       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  416 
//  417       // Initiate an End Device Bind Request for the mandatory endpoint
//  418       dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  419       dstAddr.addr.shortAddr = 0x0000; // Coordinator
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  420       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
//  421                             BeginApp_epDesc.endPoint,
//  422                             BEGINAPP_PROFID,
//  423                             BEGINAPP_MAX_CLUSTERS, (cId_t *)BeginApp_ClusterList,
//  424                             BEGINAPP_MAX_CLUSTERS, (cId_t *)BeginApp_ClusterList,
//  425                             FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0xf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     DPTR,#BeginApp_epDesc
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  426     }
//  427 
//  428     if ( keys & HAL_KEY_SW_3 )
//  429     {
//  430     }
//  431 
//  432     if ( keys & HAL_KEY_SW_4 )
??BeginApp_HandleKeys_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.3
        JNC     ??BeginApp_HandleKeys_0
//  433     {
//  434       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  435       // Initiate a Match Description Request (Service Discovery)
//  436       dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  437       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  438       ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
//  439                         BEGINAPP_PROFID,
//  440                         BEGINAPP_MAX_CLUSTERS, (cId_t *)BeginApp_ClusterList,
//  441                         BEGINAPP_MAX_CLUSTERS, (cId_t *)BeginApp_ClusterList,
//  442                         FALSE );
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,#0x1
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  443     }
//  444   }
//  445 }
??BeginApp_HandleKeys_0:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock6
//  446 
//  447 /*********************************************************************
//  448  * LOCAL FUNCTIONS
//  449  */
//  450 
//  451 /*********************************************************************
//  452  * @fn      BeginApp_MessageMSGCB
//  453  *
//  454  * @brief   Data message processor callback.  This function processes
//  455  *          any incoming data - probably from other devices.  So, based
//  456  *          on cluster ID, perform the intended action.
//  457  *
//  458  * @param   none
//  459  *
//  460  * @return  none
//  461  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  462 void BeginApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
BeginApp_MessageMSGCB:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function BeginApp_MessageMSGCB
//  463 {
        FUNCALL BeginApp_MessageMSGCB, HalLcdWriteScreen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  464   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??BeginApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??BeginApp_MessageMSGCB_0:
        JNZ     ??BeginApp_MessageMSGCB_1
//  465   {
//  466     case BEGINAPP_CLUSTERID:
//  467       // "the" message
//  468 #if defined( LCD_SUPPORTED )
//  469       HalLcdWriteScreen( (char*)pkt->cmd.Data, "rcvd" );
        ; Setup parameters for call to function HalLcdWriteScreen
        MOV     R4,#(`?<Constant "rcvd">` & 0xff)
        MOV     R5,#((`?<Constant "rcvd">` >> 8) & 0xff)
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??HalLcdWriteScreen?relay
//  470 #elif defined( WIN32 )
//  471       WPRINTSTR( pkt->cmd.Data );
//  472 #endif
//  473       break;
//  474   }
//  475 }
??BeginApp_MessageMSGCB_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock7
//  476 
//  477 /*********************************************************************
//  478  * @fn      BeginApp_SendTheMessage
//  479  *
//  480  * @brief   Send "the" message.
//  481  *
//  482  * @param   none
//  483  *
//  484  * @return  none
//  485  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  486 void BeginApp_SendTheMessage( void )
BeginApp_SendTheMessage:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function BeginApp_SendTheMessage
//  487 {
        FUNCALL BeginApp_SendTheMessage, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BeginApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  488   char theMessageData[] = "Hello World";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((`?<Constant "Hello World">` >> 8) & 0xff)
        MOV     DPL,#(`?<Constant "Hello World">` & 0xff)
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  489 
//  490   if ( AF_DataRequest( &BeginApp_DstAddr, &BeginApp_epDesc,
//  491                        BEGINAPP_CLUSTERID,
//  492                        (byte)osal_strlen( theMessageData ) + 1,
//  493                        (byte *)&theMessageData,
//  494                        &BeginApp_TransID,
//  495                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#(BeginApp_TransID & 0xff)
        MOV     ?V0 + 1,#((BeginApp_TransID >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#(BeginApp_epDesc & 0xff)
        MOV     R5,#((BeginApp_epDesc >> 8) & 0xff)
        MOV     R2,#(BeginApp_DstAddr & 0xff)
        MOV     R3,#((BeginApp_DstAddr >> 8) & 0xff)
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  496   {
//  497     // Successfully requested to be sent.
//  498   }
//  499   else
//  500   {
//  501     // Error occurred in request to send.
//  502   }
//  503 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BeginApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BeginApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BeginApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BeginApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BeginApp_ProcessZDOMsgs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BeginApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BeginApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BeginApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BeginApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BeginApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BeginApp_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BeginApp_SendTheMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "BeginApp">`:
        DB "BeginApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "rcvd">`:
        DB "rcvd"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "Hello World">`:
        DB "Hello World"

        END
//  504 
//  505 /*********************************************************************
//  506 *********************************************************************/
// 
// 898 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//  40 bytes in segment XDATA_ROM_C
//  21 bytes in segment XDATA_Z
// 
// 934 bytes of CODE  memory
//  40 bytes of CONST memory
//  21 bytes of XDATA memory
//
//Errors: none
//Warnings: none
